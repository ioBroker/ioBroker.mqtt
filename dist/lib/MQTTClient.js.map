{"version":3,"file":"MQTTClient.js","sourceRoot":"","sources":["../../src/lib/MQTTClient.ts"],"names":[],"mappings":";;AAAA,+BAAqE;AACrE,qCAAuC,CAAC,+CAA+C;AACvF,qCAQkB;AAGlB,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAErD,MAAM,YAAY;AACd,2EAA2E;AAC3E,stHAAstH,CAAC;AAE3tH,MAAqB,UAAU;IACnB,MAAM,GAAsB,IAAI,CAAC;IACxB,QAAQ,GASrB,EAAE,CAAC;IACU,QAAQ,GAA8B,EAAE,CAAC;IACzC,cAAc,CAAS;IAChC,SAAS,GAAG,KAAK,CAAC;IACT,eAAe,GAAG,EAAE,CAAC;IAErB,oBAAoB,GAAa,EAAE,CAAC;IACpC,aAAa,CAAW;IACxB,OAAO,CAAmB;IAC1B,MAAM,CAAoB;IACnC,QAAQ,GAAa,EAAE,CAAC;IACf,MAAM,CAAiC;IAExD,YAAY,OAAyB,EAAE,MAAsC;QACzE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAA2B,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjE,KAAK,MAAM,mBAAmB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACnD,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBACvB,uFAAuF;gBACvF,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAChC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBACxE,CAAC;gBACD,SAAS;YACb,CAAC;YACD,MAAM,8BAA8B,GAAG,IAAA,sBAAa,EAChD,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,mBAAmB,EAAE,EAClD,IAAI,CAAC,OAAO,CACf,CAAC;YACF,MAAM,iBAAiB,GAAG,IAAA,sBAAa,EAAC,mBAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,gCAAgC,mBAAmB,aAAa,iBAAiB,QAAQ,8BAA8B,GAAG,CAC7H,CAAC;YACF,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,iBAAiB,CAAC,EAAE,IAAI,MAAM,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC9G,CAAC;QACD,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,sBAAsB,GAAG,EAAE,CAAC,CAAC,CAAC;QAC5F,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEM,OAAO;QACV,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;YAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;IACL,CAAC;IAEM,aAAa,CAAC,EAAU,EAAE,KAAwC;QACrE,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAChC,CAAC;IACM,SAAS,CAAC,KAAgB,EAAE,OAAY,EAAE,MAAe,EAAE,MAAe;QAC7E,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC;IAEO,WAAW,CAAC,EAAU,EAAE,KAAwC,EAAE,EAAyB;QAC/F,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACf,OAAO;QACX,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEhC,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;oBACf,OAAO;gBACX,CAAC;gBACD,IAAI,CAAC,GAAG,EAAE,CAAC;oBACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qCAAqC,EAAE,qBAAqB,CAAC,CAAC;oBACpF,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;oBACT,OAAO;gBACX,CAAC;gBACD,IAAI,MAAM,CAAC;gBACX,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;oBACrB,MAAM,GAAG,IAAA,wBAAe,EACpB,GAAG,CAAC,GAAG,EACP,IAAI,EACJ,IAAI,CAAC,MAAM,CAAC,MAAM,EAClB,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,MAAM,CAAC,YAAY,CAC3B,CAAC;gBACN,CAAC;qBAAM,CAAC;oBACJ,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC9B,CAAC;gBAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,GAA2B,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;gBAE5E,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YACH,OAAO;QACX,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC;QAErD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,CAAC;QAEzG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACb,CAAC;IAEO,cAAc,CAAC,KAAgB,EAAE,OAAY,EAAE,MAAgB,EAAE,MAAgB;QACrF,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC5C,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,KAAK,YAAY,CAAC,CAAC;QACjE,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACzG,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YACxB,uDAAuD;YACvD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACV,OAAO,GAAG,IAAA,qBAAY,EAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACjE,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,OAAO;gBACH,kEAAkE;gBAClE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM;oBAC/E,CAAC,CAAC,OAAO;oBACT,CAAC,CAAC,IAAA,qBAAY,EAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC,MAAM,EAAE,OAAO,CAChB,KAAK,EACL,OAAO,EACP,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EACrE,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,0BAA0B,GAAY,EAAE,CAAC,CACjF,CAAC;IACN,CAAC;IAEO,gBAAgB,CAAC,SAAmB;QACxC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAC9C,OAAO;QACX,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACf,OAAO;QACX,CAAC;QAED,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;oBACf,OAAO;gBACX,CAAC;gBAED,IAAI,MAAM,CAAC;gBACX,IAAI,CAAC,GAAG,EAAE,CAAC;oBACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,sCAAsC,EAAE,sBAAsB,CAAC,CAAC;oBACtF,OAAO;gBACX,CAAC;qBAAM,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;oBAC1C,MAAM,GAAG,IAAA,wBAAe,EACpB,GAAG,CAAC,GAAG,EACP,IAAI,EACJ,IAAI,CAAC,MAAM,CAAC,MAAM,EAClB,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,MAAM,CAAC,YAAY,CAC3B,CAAC;gBACN,CAAC;qBAAM,CAAC;oBACJ,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC9B,CAAC;gBAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;gBAEtE,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;YACH,OAAO;QACX,CAAC;QACD,SAAS,CAAC,KAAK,EAAE,CAAC;QAElB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YAClE,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAC1B,IAAA,qBAAY,EAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAC1D,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAC3D,GAAG,CAAC,EAAE;gBACF,IAAI,GAAG,EAAE,CAAC;oBACN,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,wBAAwB,GAAY,EAAE,CAAC,CAAC;gBACnE,CAAC;gBACD,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YACzD,CAAC,CACJ,CAAC;QACN,CAAC;aAAM,CAAC;YACJ,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;gBAClB,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EACjB,IAAA,qBAAY,EAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAC1D,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAC3D,GAAG,CAAC,EAAE;oBACF,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,6BAA6B,GAAY,EAAE,CAAC,CAAC;oBAC3E,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;gBACzD,CAAC,CACJ,CAAC;YACN,CAAC;iBAAM,CAAC;gBACJ,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YACzD,CAAC;QACL,CAAC;IACL,CAAC;IAEO,IAAI;QACR,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtC,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC3H,MAAM,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,kBAAkB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAClR,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,KAAK,EAAE,CAAC,CAAC;QAEpD,qFAAqF;QACrF,IAAI,YAAY,GAAG,IAAI,CAAC;QAExB,uEAAuE;QACvE,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;gBAClC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC;gBAC/C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,4EAA4E,YAAY,EAAE,CAC7F,CAAC;YACN,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,oGAAoG,CACvG,CAAC;YACN,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,qFAAqF,CACxF,CAAC;QACN,CAAC;QAED,IAAI,CAAC;YACD,MAAM,IAAI,GAAmB;gBACzB,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE,CAAC,gBAAgB;gBACvD,UAAU,EAAE,MAAM;gBAClB,eAAe,EAAE,CAAC;gBAClB,eAAe,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB;gBACjF,cAAc,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB;gBAC/E,KAAK,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU;gBAC9B,kBAAkB,EACd,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,sDAAsD;aAC5F,CAAC;YAEF,gEAAgE;YAChE,IAAI,YAAY,EAAE,CAAC;gBACf,IAAI,CAAC;oBACD,IAAI,CAAC,EAAE,GAAG,IAAA,sBAAY,EAAC,YAAY,CAAC,CAAC;gBACzC,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,yCAAyC,YAAY,YAAa,GAAa,CAAC,OAAO,EAAE,CAC5F,CAAC;gBACN,CAAC;YACL,CAAC;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACrC,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,mDAAmD,KAAK,EAAE,CAAC,CAAC;YAEnF,IAAI,CAAC,MAAM,GAAG,IAAA,cAAO,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,mCAAmC,GAAY,EAAE,CAAC,CAAC;YAC1E,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC7F,OAAO;QACX,CAAC;QAED,sCAAsC;QACtC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC;aACxC,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;aAC9B,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;QAEhC,2CAA2C;QAC3C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;YAC9D,KAAK,MAAM,EAAE,IAAI,MAAM,EAAE,CAAC;gBACtB,MAAM,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;YACjD,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,sCAAsC;QACtC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACnD,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBACvD,GAAG,GAAG;oBACF,GAAG,EAAE,iBAAiB;oBACtB,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE;wBACJ,IAAI,EAAE,qBAAqB;wBAC3B,IAAI,EAAE;4BACF,EAAE,EAAE,6BAA6B;4BACjC,EAAE,EAAE,8BAA8B;4BAClC,EAAE,EAAE,6BAA6B;4BACjC,EAAE,EAAE,+BAA+B;4BACnC,EAAE,EAAE,kCAAkC;4BACtC,EAAE,EAAE,8BAA8B;4BAClC,EAAE,EAAE,4BAA4B;4BAChC,EAAE,EAAE,kCAAkC;4BACtC,EAAE,EAAE,iCAAiC;4BACrC,EAAE,EAAE,kCAAkC;4BACtC,OAAO,EAAE,aAAa;yBACzB;wBACD,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,IAAI;wBACV,KAAK,EAAE,KAAK;wBACZ,GAAG,EAAE,KAAK;qBACb;oBACD,MAAM,EAAE,EAAE;iBACb,CAAC;gBAEF,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,EAAE,CAChD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CACjE,CAAC;YACN,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,yDAAyD;QACzD,uCAAuC;QACvC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACzB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACpD,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBACtD,GAAG,GAAG;wBACF,GAAG,EAAE,kBAAkB;wBACvB,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE;4BACJ,IAAI,EAAE,UAAU;4BAChB,IAAI,EAAE;gCACF,EAAE,EAAE,uBAAuB;gCAC3B,EAAE,EAAE,4BAA4B;gCAChC,EAAE,EAAE,0BAA0B;gCAC9B,EAAE,EAAE,0BAA0B;gCAC9B,EAAE,EAAE,mCAAmC;gCACvC,EAAE,EAAE,+BAA+B;gCACnC,EAAE,EAAE,gCAAgC;gCACpC,EAAE,EAAE,2BAA2B;gCAC/B,EAAE,EAAE,0BAA0B;gCAC9B,EAAE,EAAE,0BAA0B;gCAC9B,OAAO,EAAE,UAAU;6BACtB;4BACD,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,IAAI;4BACV,KAAK,EAAE,KAAK;4BACZ,GAAG,EAAE,EAAE;yBACV;wBACD,MAAM,EAAE,EAAE;qBACb,CAAC;oBAEF,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,EAAE,CACjD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,EAAE,EAAE,IAAI,CAAC,CACtD,CAAC;gBACN,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,kCAAkC;QAClC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,KAAgB,EAAE,OAAe,EAAiB,EAAE;YACjF,IAAI,CAAC,KAAK,EAAE,CAAC;gBACT,OAAO;YACX,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACvB,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACxB,KAAK,GAAG,KAAK,CAAC;oBACd,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACjD,CAAC;YACL,CAAC;YAED,+BAA+B;YAC/B,IAAI,EAAE,GACF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,IAAA,wBAAe,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAE1G,IAAI,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;gBACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,6BAA6B,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAChH,CAAC;gBACF,OAAO;YACX,CAAC;YACD,IAAI,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,6CAA6C,EAAE,eAAe,CACxH,CAAC;gBACF,OAAO;YACX,CAAC;YAED,IAAI,IAAA,uBAAc,EAAC,EAAE,EAAE,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC;gBAChD,OAAO;YACX,CAAC;YAED,mCAAmC;YACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBACxB,2CAA2C;gBAC3C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;gBAEtE,iCAAiC;gBACjC,IAAI,GAAG,GAAuC,IAAI,CAAC;gBACnD,IAAI,CAAC;oBACD,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBAChD,CAAC;gBAAC,MAAM,CAAC;oBACL,SAAS;gBACb,CAAC;gBAED,IACI,GAAG,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC;oBAClD,GAAG,CAAC,IAAI,KAAK,QAAQ;oBACrB,GAAG,CAAC,MAAM,EAAE,WAAW,KAAK,2BAA2B,EACzD,CAAC;oBACC,yEAAyE;oBACzE,GAAG,GAAG,IAAI,CAAC;gBACf,CAAC;gBACD,IAAI,gBAAgB,GAAG,KAAK,CAAC;gBAE7B,IAAI,CAAC,GAAG,EAAE,CAAC;oBACP,IAAI,CAAC;wBACD,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;oBACvD,CAAC;oBAAC,MAAM,CAAC;wBACL,SAAS;oBACb,CAAC;oBAED,IACI,GAAG,EAAE,GAAG,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC;wBAClD,GAAG,CAAC,IAAI,KAAK,QAAQ;wBACrB,GAAG,CAAC,MAAM,EAAE,WAAW,KAAK,2BAA2B,EACzD,CAAC;wBACC,yEAAyE;wBACzE,GAAG,GAAG,IAAI,CAAC;oBACf,CAAC;oBAED,IAAI,CAAC,GAAG,EAAE,CAAC;wBACP,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,EAAE,CAAC;wBAEvC,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;4BAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,0BAA0B,CAAC,CAAC;4BAC9D,OAAO;wBACX,CAAC;wBAED,eAAe;wBACf,GAAG,GAAG;4BACF,GAAG,EAAE,EAAE;4BACP,MAAM,EAAE;gCACJ,IAAI,EAAE,KAAK;gCACX,KAAK,EAAE,IAAI;gCACX,IAAI,EAAE,IAAI;gCACV,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,sBAAsB;gCAC5B,IAAI,EAAE,OAAO;6BAChB;4BACD,MAAM,EAAE;gCACJ,KAAK,EAAE,KAAK;6BACf;4BACD,IAAI,EAAE,OAAO;yBAChB,CAAC;wBACF,gBAAgB,GAAG,IAAI,CAAC;oBAC5B,CAAC;gBACL,CAAC;gBACD,MAAM,QAAQ,GAAyB,GAA2B,CAAC;gBAEnE,IAAI,QAAQ,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,kBAAkB,EAAE,CAAC;oBAC/D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,2BAA2B,QAAQ,CAAC,GAAG,uCAAuC,CACjF,CAAC;oBACF,OAAO;gBACX,CAAC;gBAED,mCAAmC;gBACnC,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;oBAC7F,QAAQ,CAAC,MAAM,KAAK,EAAE,CAAC;oBACvB,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;oBAC9B,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBAChE,CAAC;gBAED,QAAQ,CAAC,MAAM,KAAK,EAA0B,CAAC;gBAE/C,uDAAuD;gBACvD,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;oBAClC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;oBAC5F,OAAO;gBACX,CAAC;gBACD,MAAM,aAAa,GAAG,IAAA,uBAAc,EAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEnE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,aAAa,CAAC;gBAE7C,MAAM,WAAW,GAAG,OAAO,aAAa,CAAC;gBACzC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;oBAC1C,CAAC,CAAC,OAAO;oBACT,CAAC,CAAC,WAAW,KAAK,QAAQ;wBACtB,WAAW,KAAK,QAAQ;wBACxB,WAAW,KAAK,SAAS;wBACzB,WAAW,KAAK,QAAQ;wBAC1B,CAAC,CAAC,WAAW;wBACb,CAAC,CAAC,OAAO,CAAC;gBAEhB,IAAI,gBAAgB,EAAE,CAAC;oBACnB,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;oBACjC,yEAAyE;oBACzE,IAAI,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;wBACvE,MAAM,WAAW,GAAG,OAAO,aAAa,CAAC,GAAG,CAAC;wBAC7C,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC;4BACnD,CAAC,CAAC,OAAO;4BACT,CAAC,CAAC,WAAW,KAAK,QAAQ;gCACtB,WAAW,KAAK,QAAQ;gCACxB,WAAW,KAAK,SAAS;gCACzB,WAAW,KAAK,QAAQ;gCAC1B,CAAC,CAAC,WAAW;gCACb,CAAC,CAAC,OAAO,CAAC;oBACpB,CAAC;oBACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,4BAA4B,KAAK,QAAQ,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC;oBACjF,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBAChE,CAAC;qBAAM,CAAC;oBACJ,mCAAmC;oBACnC,IACI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;wBACtC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK;4BACpB,CAAC,QAAQ,CAAC,MAAM;gCACZ,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO;gCAChC,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,EAChD,CAAC;wBACC,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;4BAC5F,4GAA4G;4BAC5G,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,4BAA4B,QAAQ,CAAC,GAAG,WAAW,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC,QAAQ,EAAE,SAAS,SAAS,KAAK,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CACxJ,CAAC;4BACF,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;wBACrC,CAAC;wBACD,QAAQ,CAAC,MAAM,KAAK,EAAE,CAAC;wBACvB,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;wBAC9B,IAAI,CAAC;4BACD,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;wBAChE,CAAC;wBAAC,OAAO,GAAG,EAAE,CAAC;4BACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,4BAA4B,EAAE,MAAO,GAAa,CAAC,OAAO,EAAE,CAAC,CAAC;wBACzF,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,oCAAoC;gBACpC,kCAAkC;gBAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC;gBACvC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;gBACpC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAEpC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;oBACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,oBAAoB,KAAK,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CACzH,CAAC;gBACN,CAAC;gBAED,IAAI,CAAC;oBACD,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,CAAC;wBACpC,MAAM,eAAe,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;wBAEvF,sCAAsC;wBACtC,MAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CACzD,CAAC,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CACpC,CAAC;wBAEF,iEAAiE;wBACjE,IAAI,mBAAmB,CAAC,MAAM,EAAE,CAAC;4BAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gCACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,0DAA0D,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAC7G,CAAC;4BACN,CAAC;4BAED,MAAM,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,EAAE;gCAClD,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;gCAClC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK;6BAClC,CAAC,CAAC;wBACP,CAAC;6BAAM,CAAC;4BACJ,MAAM,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;wBACzF,CAAC;oBACL,CAAC;yBAAM,CAAC;wBACJ,MAAM,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,EAAE;4BAClD,GAAG,EAAE,aAAa;4BAClB,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK;yBAClC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,8BAA8B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,GAAY,EAAE,CACvF,CAAC;gBACN,CAAC;gBAED,sCAAsC;gBACtC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;oBACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;gBACtC,CAAC;gBAED,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC;gBAEvC,uCAAuC;gBACvC,IAAA,8BAAqB,EAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAC9E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,mCAAmC,CAAC,EAAE,CAAC,CACjE,CAAC;YACN,CAAC;iBAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC;gBACzC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;oBACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,qCAAqC,KAAK,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAC1I,CAAC;gBACN,CAAC;gBACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,IAAA,uBAAc,EAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAChF,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;wBAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;oBACxC,CAAC;oBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;wBAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;oBACtC,CAAC;gBACL,CAAC;gBAED,IAAI,KAAkE,CAAC;gBACvE,MAAM,aAAa,GAAG,IAAA,uBAAc,EAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACnE,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,CAAC;oBACpC,IACI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ;wBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAChF,CAAC;wBACC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;4BACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,oBAAoB,KAAK,MAAM,OAAO,aAAa,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAC3F,CAAC;wBACN,CAAC;wBACD,KAAK,GAAG,aAAa,CAAC;oBAC1B,CAAC;yBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;wBAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,kCAAkC,KAAK,MAAM,OAAO,aAAa,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CACzG,CAAC;oBACN,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACJ,IACI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ;wBACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,KAAK,aAAa;wBAC9C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,KAAK,EACtC,CAAC;wBACC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;4BACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,aAAa,CAAC;4BAC7C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;wBACvC,CAAC;wBACD,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;4BACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,oBAAoB,KAAK,MAAM,OAAO,aAAa,MAAM,aAAa,EAAE,CAC3E,CAAC;wBACN,CAAC;wBACD,KAAK,GAAG,EAAE,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;oBAC/C,CAAC;yBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;wBAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,kCAAkC,KAAK,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAoC,EAAE,CACpJ,CAAC;oBACN,CAAC;gBACL,CAAC;gBACD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAI,CAAC;gBAC3C,MAAM,WAAW,GAAG,OAAO,KAAK,CAAC;gBACjC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;oBAClC,CAAC,CAAC,OAAO;oBACT,CAAC,CAAC,WAAW,KAAK,QAAQ;wBACtB,WAAW,KAAK,QAAQ;wBACxB,WAAW,KAAK,SAAS;wBACzB,WAAW,KAAK,QAAQ;wBAC1B,CAAC,CAAC,WAAW;wBACb,CAAC,CAAC,OAAO,CAAC;gBAEhB,IACI,KAAK,KAAK,SAAS;oBACnB,OAAO,KAAK,KAAK,QAAQ;oBACzB,KAAK,CAAC,GAAG,KAAK,SAAS;oBACvB,KAAK,CAAC,GAAG,KAAK,IAAI;oBAClB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;oBACjD,QAAQ,CAAC,MAAM;oBACf,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO;oBAChC,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EACpC,CAAC;oBACC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,4BAA4B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,QAAQ,CAAC,MAAM,CAAC,IAAI,cAAc,CACnG,CAAC;oBACF,IAAI,CAAC;wBACD,MAAM,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE;4BACjE,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;yBAC5B,CAAC,CAAC;oBACP,CAAC;oBAAC,OAAO,GAAG,EAAE,CAAC;wBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,gCAAgC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,GAAY,EAAE,CACzF,CAAC;oBACN,CAAC;oBACD,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;gBACnC,CAAC;gBAED,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,kBAAkB,EAAE,CAAC;oBAC1E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAClB,2BAA2B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,uCAAuC,CAC5F,CAAC;gBACN,CAAC;qBAAM,IAAI,KAAK,KAAK,SAAS,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;oBACrF,IAAI,CAAC;wBACD,MAAM,IAAI,CAAC,OAAO,CAAC,oBAAoB,CACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EACvB,KAA+B,CAClC,CAAC;oBACN,CAAC;oBAAC,OAAO,GAAG,EAAE,CAAC;wBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CACjB,8BAA8B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,GAAY,EAAE,CACvF,CAAC;oBACN,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACf,OAAO;YACX,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAEpE,8CAA8C;YAC9C,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACrD,MAAM,gBAAgB,GAAa,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAa,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;oBAE3F,MAAM,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE9E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;wBACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,wBAAwB,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACnE,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9C,CAAC;oBAED,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;gBACxF,CAAC,CAAC,CAAC;YACP,CAAC;YAED,2BAA2B;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC5D,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,CAAC;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;gBAChC,MAAM,SAAS,GAAa,EAAE,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;oBAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAA,uBAAc,EAAC,EAAE,EAAE,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC;wBAC9E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;wBAChD,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACvB,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YACrC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACf,OAAO;YACX,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,GAAY,EAAE,CAAC,CAAC;YAExD,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC9D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACxE,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAS,EAAE;YAC/B,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC9D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACxE,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAhxBD,6BAgxBC","sourcesContent":["import { connect, type MqttClient, type IClientOptions } from 'mqtt';\nimport { readFileSync } from 'node:fs'; // Load the built-in Node.js file system module\nimport {\n    state2string,\n    convertTopic2id,\n    convertID2topic,\n    ensureObjectStructure,\n    isIgnoredTopic,\n    pattern2RegEx,\n    convertMessage,\n} from './common';\nimport type { MqttAdapterConfig, MqttTopic } from './types';\n\nconst messageboxRegex = new RegExp('\\\\.messagebox$');\n\nconst invalidChars =\n    // eslint-disable-next-line no-control-regex, no-misleading-character-class\n    /[\\x00-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u037F-\\u0383\\u038B\\u038D\\u03A2\\u0528-\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B-\\u058E\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08A1\\u08AD-\\u08E3\\u08FF\\u0978\\u0980\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0C00\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C34\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5A-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C80\\u0C81\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D01\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D4F-\\u0D56\\u0D58-\\u0D5F\\u0D64\\u0D65\\u0D76-\\u0D78\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F5-\\u13FF\\u169D-\\u169F\\u16F1-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191D-\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C80-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7-\\u1CFF\\u1DE7-\\u1DFB\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BB-\\u20CF\\u20F1-\\u20FF\\u218A-\\u218F\\u23F4-\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2700\\u2B4D-\\u2B4F\\u2B5A-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E3C-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FCD-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA698-\\uA69E\\uA6F8-\\uA6FF\\uA78F\\uA794-\\uA79F\\uA7AB-\\uA7F7\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C5-\\uA8CD\\uA8DA-\\uA8DF\\uA8FC-\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9E0-\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAA7C-\\uAA7F\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F-\\uABBF\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE27-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]/g;\n\nexport default class MQTTClient {\n    private client: MqttClient | null = null;\n    private readonly topic2id: Record<\n        MqttTopic,\n        {\n            processing?: boolean;\n            obj: ioBroker.StateObject | null;\n            id: string;\n            isAck?: boolean;\n            message?: number | string | boolean | Record<string, any>;\n        }\n    > = {};\n    private readonly id2topic: Record<string, MqttTopic> = {};\n    private readonly namespaceRegEx: RegExp;\n    private connected = false;\n    private readonly verifiedObjects = {};\n\n    private readonly ignoredTopicsRegexes: RegExp[] = [];\n    private readonly ignoredTopics: string[];\n    private readonly adapter: ioBroker.Adapter;\n    private readonly config: MqttAdapterConfig;\n    private patterns: string[] = [];\n    private readonly states: Record<string, ioBroker.State>;\n\n    constructor(adapter: ioBroker.Adapter, states: Record<string, ioBroker.State>) {\n        this.adapter = adapter;\n        this.states = states;\n        this.namespaceRegEx = new RegExp(`^${this.adapter.namespace.replace('.', '\\\\.')}\\\\.`);\n        this.config = this.adapter.config as MqttAdapterConfig;\n        this.ignoredTopics = this.config.ignoredTopics?.split(',') ?? [];\n\n        for (const ignoredTopicPattern of this.ignoredTopics) {\n            if (!ignoredTopicPattern) {\n                // Empty strings would filter out all topics, which is probably not what the user wants\n                if (this.ignoredTopics.length > 1) {\n                    this.adapter.log.warn('Ignored topics should not end with an \",\".');\n                }\n                continue;\n            }\n            const ignoredTopicRegexWithNameSpace = pattern2RegEx(\n                `${this.adapter.namespace}.${ignoredTopicPattern}`,\n                this.adapter,\n            );\n            const ignoredTopicRegex = pattern2RegEx(ignoredTopicPattern, this.adapter);\n            this.adapter.log.info(\n                `Ignoring topic with pattern: ${ignoredTopicPattern} (RegExp: ${ignoredTopicRegex} und ${ignoredTopicRegexWithNameSpace})`,\n            );\n            this.ignoredTopicsRegexes.push(new RegExp(ignoredTopicRegex), new RegExp(ignoredTopicRegexWithNameSpace));\n        }\n        process.on('uncaughtException', err => this.adapter.log.error(`uncaughtException: ${err}`));\n        this.init();\n    }\n\n    public destroy(): void {\n        if (this.client) {\n            this.client.end();\n            this.client = null;\n        }\n    }\n\n    public onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        this.send2Server(id, state);\n    }\n    public onMessage(topic: MqttTopic, message: any, retain: boolean, binary: boolean): void {\n        this.publishMessage(topic, message, retain, binary);\n    }\n\n    private send2Server(id: string, state: ioBroker.State | null | undefined, cb?: (id: string) => void): void {\n        if (!this.client) {\n            return;\n        }\n        const topic = this.id2topic[id];\n\n        if (!topic) {\n            this.adapter.getForeignObject(id, (err, obj) => {\n                if (!this.client) {\n                    return;\n                }\n                if (!obj) {\n                    this.adapter.log.warn(`Cannot resolve topic name for ID: ${id} (object not found)`);\n                    cb?.(id);\n                    return;\n                }\n                let _topic;\n                if (!obj.native?.topic) {\n                    _topic = convertID2topic(\n                        obj._id,\n                        null,\n                        this.config.prefix,\n                        this.adapter.namespace,\n                        this.config.removePrefix,\n                    );\n                } else {\n                    _topic = obj.native.topic;\n                }\n\n                this.id2topic[obj._id] = _topic;\n                this.topic2id[_topic] ||= { obj: obj as ioBroker.StateObject, id: obj._id };\n\n                this.send2Server(obj._id, state, cb);\n            });\n            return;\n        }\n        this.adapter.log.info(`send2Server ${id}[${topic}]`);\n\n        this.publishMessage(this.config.extraSet && state && !state.ack ? `${topic}/set` : topic, state || null);\n\n        cb?.(id);\n    }\n\n    private publishMessage(topic: MqttTopic, message: any, retain?: boolean, binary?: boolean): void {\n        if (message === null || message === undefined) {\n            message = null;\n            this.adapter.log.debug(`Send to server \"${topic}\": deleted`);\n        } else {\n            this.adapter.log.debug(`Send to server \"${this.config.prefix}${topic}\": ${JSON.stringify(message)}`);\n        }\n\n        if (!this.topic2id[topic]) {\n            // it is from messageBox, so try to detect binary state\n            if (!binary) {\n                message = state2string(message, this.config.sendStateObject);\n            }\n        } else {\n            message =\n                // @ts-expect-error binary states are deprecated, but could happen\n                this.topic2id[topic].obj?.common && this.topic2id[topic].obj.common.type === 'file'\n                    ? message\n                    : state2string(message, this.config.sendStateObject);\n        }\n\n        this.client?.publish(\n            topic,\n            message,\n            { qos: this.config.defaultQoS, retain: retain ?? this.config.retain },\n            err => err && this.adapter.log.error(`client publishMessage: ${err as Error}`),\n        );\n    }\n\n    private publishAllStates(toPublish: string[]): void {\n        if (!toPublish?.length) {\n            this.adapter.log.info('All states published');\n            return;\n        }\n\n        if (!this.client) {\n            return;\n        }\n\n        const id = toPublish[0];\n        if (!this.id2topic[id]) {\n            this.adapter.getForeignObject(id, (err, obj) => {\n                if (!this.client) {\n                    return;\n                }\n\n                let _topic;\n                if (!obj) {\n                    this.adapter.log.warn(`Cannot resolve topic name for ID: \"${id}\" (object not found)`);\n                    return;\n                } else if (!obj.native || !obj.native.topic) {\n                    _topic = convertID2topic(\n                        obj._id,\n                        null,\n                        this.config.prefix,\n                        this.adapter.namespace,\n                        this.config.removePrefix,\n                    );\n                } else {\n                    _topic = obj.native.topic;\n                }\n\n                this.id2topic[obj._id] = _topic;\n                this.topic2id[_topic] = this.topic2id[_topic] || { obj, id: obj._id };\n\n                setImmediate(() => this.publishAllStates(toPublish));\n            });\n            return;\n        }\n        toPublish.shift();\n\n        if (this.config.extraSet && this.states[id] && !this.states[id].ack) {\n            this.client.publish(\n                `${this.id2topic[id]}/set`,\n                state2string(this.states[id], this.config.sendStateObject),\n                { qos: this.config.defaultQoS, retain: this.config.retain },\n                err => {\n                    if (err) {\n                        this.adapter.log.error(`client.publish /set: ${err as Error}`);\n                    }\n                    setImmediate(() => this.publishAllStates(toPublish));\n                },\n            );\n        } else {\n            if (this.states[id]) {\n                this.client.publish(\n                    this.id2topic[id],\n                    state2string(this.states[id], this.config.sendStateObject),\n                    { qos: this.config.defaultQoS, retain: this.config.retain },\n                    err => {\n                        err && this.adapter.log.error(`client.publish AllStates: ${err as Error}`);\n                        setImmediate(() => this.publishAllStates(toPublish));\n                    },\n                );\n            } else {\n                setImmediate(() => this.publishAllStates(toPublish));\n            }\n        }\n    }\n\n    private init(): void {\n        const clientId = this.config.clientId;\n        const _url = `${this.config.ssl ? 'mqtts' : 'mqtt'}://${this.config.url}${this.config.port ? `:${this.config.port}` : ''}`;\n        const __url = `${this.config.ssl ? 'mqtts' : 'mqtt'}://${this.config.url}${this.config.port ? `:${this.config.port}` : ''} with clientId=${encodeURIComponent(clientId)}${this.config.user ? `and credentials ${encodeURIComponent(this.config.user)}:*******************` : ''}`;\n        this.adapter.log.info(`Try to connect to ${__url}`);\n\n        // This variable will hold the root certificate path provided in the this.adapter UI.\n        let rootCertPath = null;\n\n        // Load certificate only if SSL and self-signed certificate are enabled\n        if (this.config.ssl && this.config.selfSigned) {\n            if (this.config.rootCertificatePath) {\n                rootCertPath = this.config.rootCertificatePath;\n                this.adapter.log.debug(\n                    `SSL and self-signed certificates are enabled. Using root certificate at: ${rootCertPath}`,\n                );\n            } else {\n                this.adapter.log.warn(\n                    `SSL and self-signed certificates are enabled, but the root certificate path was not set in the UI.`,\n                );\n            }\n        } else {\n            this.adapter.log.debug(\n                `SSL and/or self-signed certificates not enabled. Root certificate will not be used.`,\n            );\n        }\n\n        try {\n            const opts: IClientOptions = {\n                clientId: clientId,\n                keepalive: this.config.keepalive || 10 /* in seconds */,\n                protocolId: 'MQTT',\n                protocolVersion: 4,\n                reconnectPeriod: (this.config.reconnectPeriod || 10) * 1000 /* in milliseconds */,\n                connectTimeout: (this.config.connectTimeout || 30) * 1000 /* in milliseconds */,\n                clean: !this.config.persistent,\n                rejectUnauthorized:\n                    this.config.rejectUnauthorized /* added option to disable certification validation */,\n            };\n\n            // If SSL and self-signed are used, try to load the certificate!\n            if (rootCertPath) {\n                try {\n                    opts.ca = readFileSync(rootCertPath);\n                } catch (err) {\n                    this.adapter.log.error(\n                        `Could not read root certificate from: ${rootCertPath}. Error: ${(err as Error).message}`,\n                    );\n                }\n            }\n\n            if (this.config.user) {\n                opts.username = this.config.user;\n                opts.password = this.config.pass;\n            }\n\n            this.adapter.log.debug(`The connection is now being established to URL: ${__url}`);\n\n            this.client = connect(_url, opts);\n        } catch (err) {\n            this.adapter.log.error(`Can not connect to mqtt server: ${err as Error}`);\n            typeof this.adapter.terminate === 'function' ? this.adapter.terminate(11) : process.exit(11);\n            return;\n        }\n\n        // By default, subscribe on all topics\n        this.patterns = (this.config.patterns || '#')\n            .split(',')\n            .map(pattern => pattern.trim())\n            .filter(pattern => pattern);\n\n        // delete all server connection information\n        this.adapter.getStatesAsync('info.clients.*').then(async states => {\n            for (const id in states) {\n                await this.adapter.delForeignObjectAsync(id);\n            }\n        });\n\n        // create a connected object and state\n        this.adapter.getObject('info.connection', (err, obj) => {\n            if (!obj || !obj.common || obj.common.type !== 'boolean') {\n                obj = {\n                    _id: 'info.connection',\n                    type: 'state',\n                    common: {\n                        role: 'indicator.connected',\n                        name: {\n                            en: 'If connected to MQTT broker',\n                            de: 'Ob mit MQTT Broker verbunden',\n                            ru: 'Подключен ли к MQTT брокеру',\n                            pt: 'Se conectado ao corretor MQTT',\n                            nl: 'Indien verbonden met MQTT broker',\n                            fr: 'Si connecté au courtier MQTT',\n                            it: 'Se connesso al broker MQTT',\n                            es: 'Si está conectado al broker MQTT',\n                            pl: 'Jeśli połączony z brokerem MQTT',\n                            uk: 'Якщо підключений до MQTT брокера',\n                            'zh-cn': '是否连接到MQTT代理',\n                        },\n                        type: 'boolean',\n                        read: true,\n                        write: false,\n                        def: false,\n                    },\n                    native: {},\n                };\n\n                this.adapter.setObject('info.connection', obj, () =>\n                    this.adapter.setState('info.connection', this.connected, true),\n                );\n            }\n        });\n\n        // create last Session object and state to store previous\n        // topics in case of persisted sessions\n        if (this.config.persistent) {\n            this.adapter.getObject('info.lastSession', (err, obj) => {\n                if (!obj || !obj.common || obj.common.type !== 'string') {\n                    obj = {\n                        _id: 'info.lastSession',\n                        type: 'state',\n                        common: {\n                            role: 'variable',\n                            name: {\n                                en: \"Last session's topics\",\n                                de: 'Topics der letzten Session',\n                                ru: 'Топики предыдущей сессии',\n                                pt: 'Tópicos da última sessão',\n                                nl: 'Onderwerpen van de laatste sessie',\n                                fr: 'Sujets de la dernière session',\n                                it: \"Argomenti dell'ultima sessione\",\n                                es: 'Temas de la última sesión',\n                                pl: 'Tematy poprzedniej sesji',\n                                uk: 'Топіки попередньої сесії',\n                                'zh-cn': '上一个会话的主题',\n                            },\n                            type: 'string',\n                            read: true,\n                            write: false,\n                            def: '',\n                        },\n                        native: {},\n                    };\n\n                    this.adapter.setObject('info.lastSession', obj, () =>\n                        this.adapter.setState('info.lastSession', '', true),\n                    );\n                }\n            });\n        }\n\n        // topic from MQTT broker received\n        this.client.on('message', async (topic: MqttTopic, message: Buffer): Promise<void> => {\n            if (!topic) {\n                return;\n            }\n\n            let isAck = true;\n\n            if (this.config.extraSet) {\n                if (topic.match(/\\/set$/)) {\n                    isAck = false;\n                    topic = topic.substring(0, topic.length - 4);\n                }\n            }\n\n            // try to convert a topic to ID\n            let id =\n                this.topic2id[topic]?.id || convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n\n            if (id.length > this.config.maxTopicLength) {\n                this.adapter.log.warn(\n                    `[${this.client ? this.config.clientId : 'disconnected'}] Topic name is too long: ${id.substring(0, 100)}...`,\n                );\n                return;\n            }\n            if (id.match(invalidChars)) {\n                this.adapter.log.warn(\n                    `[${this.client ? this.config.clientId : 'disconnected'}] Topic name contains invalid characters: ${id} ... ignoring`,\n                );\n                return;\n            }\n\n            if (isIgnoredTopic(id, this.ignoredTopicsRegexes)) {\n                return;\n            }\n\n            // if no cache for this topic found\n            if (!this.topic2id[topic]) {\n                // null indicates that it is processing now\n                this.topic2id[topic] = { id: '', isAck, obj: null, processing: true };\n\n                // Create an object if not exists\n                let obj: ioBroker.Object | undefined | null = null;\n                try {\n                    obj = await this.adapter.getObjectAsync(id);\n                } catch {\n                    // ignore\n                }\n\n                if (\n                    obj?._id?.startsWith(`${this.adapter.namespace}.`) &&\n                    obj.type === 'folder' &&\n                    obj.native?.autocreated === 'by automatic ensure logic'\n                ) {\n                    // ignore a default created object because we now have a more defined one\n                    obj = null;\n                }\n                let typeWasUndefined = false;\n\n                if (!obj) {\n                    try {\n                        obj = await this.adapter.getForeignObjectAsync(id);\n                    } catch {\n                        // ignore\n                    }\n\n                    if (\n                        obj?._id?.startsWith(`${this.adapter.namespace}.`) &&\n                        obj.type === 'folder' &&\n                        obj.native?.autocreated === 'by automatic ensure logic'\n                    ) {\n                        // ignore a default created object because we now have a more defined one\n                        obj = null;\n                    }\n\n                    if (!obj) {\n                        id = `${this.adapter.namespace}.${id}`;\n\n                        if (this.config.ignoreNewObjects) {\n                            this.adapter.log.info(`Object ${id} ignored and not created`);\n                            return;\n                        }\n\n                        // create state\n                        obj = {\n                            _id: id,\n                            common: {\n                                name: topic,\n                                write: true,\n                                read: true,\n                                role: 'variable',\n                                desc: 'mqtt client variable',\n                                type: 'mixed',\n                            },\n                            native: {\n                                topic: topic,\n                            },\n                            type: 'state',\n                        };\n                        typeWasUndefined = true;\n                    }\n                }\n                const stateObj: ioBroker.StateObject = obj as ioBroker.StateObject;\n\n                if (stateObj._id === `${this.adapter.namespace}.info.connection`) {\n                    this.adapter.log.debug(\n                        `Ignore State update for ${stateObj._id} because this.adapter internal state.`,\n                    );\n                    return;\n                }\n\n                // expand an old version of objects\n                if (stateObj.common?.type && this.namespaceRegEx.test(stateObj._id) && !stateObj.native?.topic) {\n                    stateObj.native ||= {};\n                    stateObj.native.topic = topic;\n                    await this.adapter.setForeignObject(stateObj._id, stateObj);\n                }\n\n                stateObj.common ||= {} as ioBroker.StateCommon;\n\n                // @ts-expect-error file is deprecated but could happen\n                if (stateObj.common.type === 'file') {\n                    this.adapter.log.warn('\"file\" type is deprecated. Please use \"mixed\" or \"string\" instead.');\n                    return;\n                }\n                const parsedMessage = convertMessage(topic, message, this.adapter);\n\n                this.topic2id[topic].message = parsedMessage;\n\n                const messageType = typeof parsedMessage;\n                const stateType = Array.isArray(parsedMessage)\n                    ? 'array'\n                    : messageType === 'string' ||\n                        messageType === 'number' ||\n                        messageType === 'boolean' ||\n                        messageType === 'object'\n                      ? messageType\n                      : 'mixed';\n\n                if (typeWasUndefined) {\n                    stateObj.common.type = stateType;\n                    // New object which is not \"file\", we create it now that we know the type\n                    if (typeof parsedMessage === 'object' && parsedMessage.val !== undefined) {\n                        const messageType = typeof parsedMessage.val;\n                        stateObj.common.type = Array.isArray(parsedMessage.val)\n                            ? 'array'\n                            : messageType === 'string' ||\n                                messageType === 'number' ||\n                                messageType === 'boolean' ||\n                                messageType === 'object'\n                              ? messageType\n                              : 'mixed';\n                    }\n                    this.adapter.log.debug(`Create object for topic: ${topic}[ID: ${stateObj._id}]`);\n                    await this.adapter.setForeignObject(stateObj._id, stateObj);\n                } else {\n                    // expand an old version of objects\n                    if (\n                        this.namespaceRegEx.test(stateObj._id) &&\n                        (!stateObj.native?.topic ||\n                            (stateObj.common &&\n                                stateObj.common.type !== 'mixed' &&\n                                stateObj.common.type !== messageType))\n                    ) {\n                        if (stateObj.common && stateObj.common.type !== 'mixed' && stateObj.common.type !== stateType) {\n                            // mqtt topics could change types, but log it to communicate to the user if a type is frequently fluctuating\n                            this.adapter.log.info(\n                                `Client: Changed type of \"${stateObj._id}\" from \"${stateObj.common.type}\"(${message.toString()}) to \"${stateType}\"(${JSON.stringify(parsedMessage)})`,\n                            );\n                            stateObj.common.type = stateType;\n                        }\n                        stateObj.native ||= {};\n                        stateObj.native.topic = topic;\n                        try {\n                            await this.adapter.setForeignObject(stateObj._id, stateObj);\n                        } catch (err) {\n                            this.adapter.log.error(`Could not update object \"${id}\": ${(err as Error).message}`);\n                        }\n                    }\n                }\n\n                // this is a topic from this adapter\n                // Overwrite null with the real ID\n                this.topic2id[topic].id = stateObj._id;\n                this.topic2id[topic].obj = stateObj;\n                this.id2topic[stateObj._id] = topic;\n\n                if (this.config.debug) {\n                    this.adapter.log.debug(\n                        `Client received \"${topic}\" (${typeof this.topic2id[topic].message}): ${JSON.stringify(this.topic2id[topic].message)}`,\n                    );\n                }\n\n                try {\n                    if (typeof parsedMessage === 'object') {\n                        const validProperties = ['val', 'ack', 'ts', 'q', 'from', 'c', 'expire', 'lc', 'user'];\n\n                        // Are there any forbidden properties?\n                        const forbiddenProperties = Object.keys(parsedMessage).filter(\n                            k => !validProperties.includes(k),\n                        );\n\n                        // If there are forbidden properties, we save the message as JSON\n                        if (forbiddenProperties.length) {\n                            if (this.config.debug) {\n                                this.adapter.log.debug(\n                                    `The message object contains forbidden state properties ${forbiddenProperties.join(', ')}: Saving as JSON`,\n                                );\n                            }\n\n                            await this.adapter.setForeignStateAsync(stateObj._id, {\n                                val: JSON.stringify(parsedMessage),\n                                ack: this.topic2id[topic].isAck,\n                            });\n                        } else {\n                            await this.adapter.setForeignStateAsync(stateObj._id, JSON.stringify(parsedMessage));\n                        }\n                    } else {\n                        await this.adapter.setForeignStateAsync(stateObj._id, {\n                            val: parsedMessage,\n                            ack: this.topic2id[topic].isAck,\n                        });\n                    }\n                } catch (err) {\n                    this.adapter.log.warn(\n                        `Error while setting state \"${this.topic2id[topic].id}\" for Client: ${err as Error}`,\n                    );\n                }\n\n                // we do not need these values anymore\n                if (!this.config.onchange) {\n                    delete this.topic2id[topic].message;\n                    delete this.topic2id[topic].isAck;\n                }\n\n                delete this.topic2id[topic].processing;\n\n                // do not wait the end of this function\n                ensureObjectStructure(this.adapter, stateObj._id, this.verifiedObjects).catch(e =>\n                    this.adapter.log.error(`Cannot ensure object structure: ${e}`),\n                );\n            } else if (this.topic2id[topic].processing) {\n                if (this.config.debug) {\n                    this.adapter.log.debug(\n                        `Client received (but in process) \"${topic}\" (${typeof this.topic2id[topic].message}): ${JSON.stringify(this.topic2id[topic].message)}`,\n                    );\n                }\n                this.topic2id[topic].message = convertMessage(topic, message, this.adapter);\n            } else {\n                if (!this.config.onchange) {\n                    if (this.topic2id[topic].message !== undefined) {\n                        delete this.topic2id[topic].message;\n                    }\n                    if (this.topic2id[topic].isAck !== undefined) {\n                        delete this.topic2id[topic].isAck;\n                    }\n                }\n\n                let value: undefined | string | number | boolean | Record<string, any>;\n                const parsedMessage = convertMessage(topic, message, this.adapter);\n                if (typeof parsedMessage === 'object') {\n                    if (\n                        !this.config.onchange ||\n                        JSON.stringify(this.topic2id[topic].message) !== JSON.stringify(parsedMessage)\n                    ) {\n                        if (this.config.debug) {\n                            this.adapter.log.debug(\n                                `Client received \"${topic}\" (${typeof parsedMessage}): ${JSON.stringify(parsedMessage)}`,\n                            );\n                        }\n                        value = parsedMessage;\n                    } else if (this.config.debug) {\n                        this.adapter.log.debug(\n                            `Client received (but ignored) \"${topic}\" (${typeof parsedMessage}): ${JSON.stringify(parsedMessage)}`,\n                        );\n                    }\n                } else {\n                    if (\n                        !this.config.onchange ||\n                        this.topic2id[topic].message !== parsedMessage ||\n                        this.topic2id[topic].isAck !== isAck\n                    ) {\n                        if (this.config.onchange) {\n                            this.topic2id[topic].message = parsedMessage;\n                            this.topic2id[topic].isAck = isAck;\n                        }\n                        if (this.config.debug) {\n                            this.adapter.log.debug(\n                                `Client received \"${topic}\" (${typeof parsedMessage}): ${parsedMessage}`,\n                            );\n                        }\n                        value = { val: parsedMessage, ack: isAck };\n                    } else if (this.config.debug) {\n                        this.adapter.log.debug(\n                            `Client received (but ignored) \"${topic}\" (${typeof this.topic2id[topic].message}): ${this.topic2id[topic].message as string | boolean | number}`,\n                        );\n                    }\n                }\n                const stateObj = this.topic2id[topic].obj!;\n                const messageType = typeof value;\n                const stateType = Array.isArray(value)\n                    ? 'array'\n                    : messageType === 'string' ||\n                        messageType === 'number' ||\n                        messageType === 'boolean' ||\n                        messageType === 'object'\n                      ? messageType\n                      : 'mixed';\n\n                if (\n                    value !== undefined &&\n                    typeof value === 'object' &&\n                    value.val !== undefined &&\n                    value.val !== null &&\n                    this.namespaceRegEx.test(this.topic2id[topic].id) &&\n                    stateObj.common &&\n                    stateObj.common.type !== 'mixed' &&\n                    stateObj.common.type !== stateType\n                ) {\n                    this.adapter.log.info(\n                        `Client: Changed type of \"${this.topic2id[topic].id}\" from \"${stateObj.common.type}\" to \"mixed\"`,\n                    );\n                    try {\n                        await this.adapter.extendForeignObjectAsync(this.topic2id[topic].id, {\n                            common: { type: 'mixed' },\n                        });\n                    } catch (err) {\n                        this.adapter.log.warn(\n                            `Error while updating object \"${this.topic2id[topic].id}\" for Client: ${err as Error}`,\n                        );\n                    }\n                    stateObj.common.type = 'mixed';\n                }\n\n                if (this.topic2id[topic].id === `${this.adapter.namespace}.info.connection`) {\n                    this.adapter.log.debug(\n                        `Ignore State update for ${this.topic2id[topic].id} because this.adapter internal state.`,\n                    );\n                } else if (value !== undefined && typeof value === 'object' && value.val !== undefined) {\n                    try {\n                        await this.adapter.setForeignStateAsync(\n                            this.topic2id[topic].id,\n                            value as ioBroker.SettableState,\n                        );\n                    } catch (err) {\n                        this.adapter.log.warn(\n                            `Error while setting state \"${this.topic2id[topic].id}\" for Client: ${err as Error}`,\n                        );\n                    }\n                }\n            }\n        });\n\n        this.client.on('connect', () => {\n            if (!this.client) {\n                return;\n            }\n            this.adapter.log.info(`Connected to ${this.config.url}`);\n            this.connected = true;\n            void this.adapter.setState('info.connection', this.connected, true);\n\n            // unsubscribe old topics in persisted session\n            if (this.config.persistent) {\n                this.adapter.getState('info.lastSession', (err, state) => {\n                    const patternsPrevious: string[] = state?.val ? JSON.parse(state.val as string) || [] : [];\n\n                    const patternsDiff = patternsPrevious.filter(x => !this.patterns.includes(x));\n\n                    for (let i = 0; i < patternsDiff.length; i++) {\n                        patternsDiff[i] = patternsDiff[i].trim();\n                        this.adapter.log.debug(`Unsubscribed Topic: \"${patternsDiff[i]}\"`);\n                        this.client?.unsubscribe(patternsDiff[i]);\n                    }\n\n                    void this.adapter.setState('info.lastSession', JSON.stringify(this.patterns), true);\n                });\n            }\n\n            // subscribe current topics\n            for (let i = 0; i < this.patterns.length; i++) {\n                this.adapter.log.info(`Subscribe on \"${this.patterns[i]}\"`);\n                this.client.subscribe(this.patterns[i]);\n            }\n\n            if (this.config.publishAllOnStart) {\n                const toPublish: string[] = [];\n                Object.keys(this.states).forEach(id => {\n                    if (!messageboxRegex.test(id) && !isIgnoredTopic(id, this.ignoredTopicsRegexes)) {\n                        this.adapter.log.info(`Publishing state ${id}`);\n                        toPublish.push(id);\n                    }\n                });\n                this.publishAllStates(toPublish);\n            }\n        });\n\n        this.client.on('reconnect', () => {\n            if (!this.client) {\n                return;\n            }\n            this.adapter.log.info(`Reconnected to ${this.config.url}`);\n            this.connected = true;\n            void this.adapter.setState('info.connection', this.connected, true);\n        });\n\n        this.client.on('error', err => {\n            this.adapter.log.error(`Client error: ${err as Error}`);\n\n            if (this.connected) {\n                this.adapter.log.info(`Disconnected from ${this.config.url}`);\n                this.connected = false;\n                void this.adapter.setState('info.connection', this.connected, true);\n            }\n        });\n\n        this.client.on('close', (): void => {\n            if (this.connected) {\n                this.adapter.log.info(`Disconnected from ${this.config.url}`);\n                this.connected = false;\n                void this.adapter.setState('info.connection', this.connected, true);\n            }\n        });\n    }\n}\n"]}