{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/lib/server.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst mqtt = require('mqtt-connection');\nconst state2string = require('./common').state2string;\nconst convertTopic2id = require('./common').convertTopic2id;\nconst convertID2topic = require('./common').convertID2topic;\nconst ensureObjectStructure = require('./common').ensureObjectStructure;\nconst isIgnoredTopic = require('./common').isIgnoredTopic;\nconst pattern2RegEx = require('./common').pattern2RegEx;\nconst convertMessage = require('./common').convertMessage;\nconst messageboxRegex = new RegExp('\\\\.messagebox$');\n\n// todo delete from persistentSessions the sessions and messages after some time\n\nfunction MQTTServer(adapter, states) {\n    if (!(this instanceof MQTTServer)) {\n        return new MQTTServer(adapter, states);\n    }\n\n    const namespaceRegEx = new RegExp(`^${adapter.namespace.replace('.', '\\\\.')}\\\\.`);\n\n    let net;\n    let http;\n    let ws;\n    let wsStream;\n    let server = null;\n    let serverWs = null;\n    let serverForWs = null;\n    const clients = {};\n    const topic2id = {};\n    const id2topic = {};\n    let messageId = 1;\n    let persistentSessions = {};\n    let resending = false;\n    let resendTimer = null;\n    const verifiedObjects = {};\n    let channelChecked = false;\n    let updateClientsTimeout = null;\n    let updateClientsRunning = false;\n    let updateClientsRestart = false;\n\n    const ignoredTopicsRegexes = [];\n    const ignoredTopics = adapter.config.ignoredTopics?.split(',') ?? [];\n    for (const ignoredTopicPattern of ignoredTopics) {\n        if (!ignoredTopicPattern) {\n            // Empty strings would filter out all topics, which is probably not what the user wants\n            ignoredTopics.length > 1 && adapter.log.warn(`Ignored topics should not end with an \",\".`);\n            continue;\n        }\n        const ignoredTopicRegexWithNameSpace = pattern2RegEx(`${adapter.namespace}.${ignoredTopicPattern}`, adapter);\n        const ignoredTopicRegex = pattern2RegEx(ignoredTopicPattern, adapter);\n        adapter.log.info(\n            `Ignoring topic with pattern: ${ignoredTopicPattern} (RegExp: ${ignoredTopicRegex} und ${ignoredTopicRegexWithNameSpace})`,\n        );\n        ignoredTopicsRegexes.push(new RegExp(ignoredTopicRegex), new RegExp(ignoredTopicRegexWithNameSpace));\n    }\n\n    adapter.config.sendOnStartInterval = parseInt(adapter.config.sendOnStartInterval, 10) || 2000;\n    adapter.config.sendInterval = parseInt(adapter.config.sendInterval, 10) || 0;\n\n    this.destroy = cb => {\n        if (resendTimer) {\n            clearInterval(resendTimer);\n            resendTimer = null;\n        }\n        persistentSessions = {};\n        let tasks = 0;\n        let timeout;\n        if (cb) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                if (cb) {\n                    cb();\n                    cb = null;\n                }\n            }, 2000);\n        }\n        if (server) {\n            tasks++;\n            // to release all resources\n            server.close(() => {\n                console.log('all gone!');\n                if (!--tasks && cb) {\n                    clearTimeout(timeout);\n                    cb();\n                    cb = null;\n                }\n            });\n            server = null;\n        }\n\n        if (serverForWs) {\n            tasks++;\n            // to release all resources\n            serverForWs.close(() => {\n                console.log('all ws gone!');\n                if (!--tasks && cb) {\n                    clearTimeout(timeout);\n                    cb();\n                    cb = null;\n                }\n            });\n            serverForWs = null;\n        }\n        if (!tasks && cb) {\n            clearTimeout(timeout);\n            cb();\n            cb = null;\n        }\n    };\n\n    this.onMessage = (topic, message, retain, binary) => {\n        if (server) {\n            setImmediate(() => {\n                for (const k in clients) {\n                    if (Object.prototype.hasOwnProperty.call(clients, k)) {\n                        sendMessage2Client(\n                            clients[k],\n                            topic,\n                            message,\n                            adapter.config.defaultQoS,\n                            retain ?? adapter.config.retain,\n                            binary,\n                        );\n                    }\n                }\n\n                /*\n                for (let clientId in persistentSessions) {\n                    if (persistentSessions.hasOwnProperty(clientId) && !clients[clientId]) {\n                        (function (_clientId) {\n                            getMqttMessage(persistentSessions[_clientId], id, state, adapter.config.defaultQoS, true, (err, message) => {\n                                message && persistentSessions[_clientId].messages.push(message);\n                            });\n                        })(clientId);\n                    }\n                }\n                */\n            });\n        }\n    };\n\n    this.onStateChange = (id, state) => {\n        adapter.log.debug(`onStateChange ${id}: ${JSON.stringify(state)}`);\n\n        if (!server) {\n            return;\n        }\n\n        setImmediate(() => {\n            Object.keys(clients).forEach(k =>\n                sendState2Client(clients[k], id, state, adapter.config.defaultQoS, !adapter.config.noRetain),\n            );\n\n            Object.keys(persistentSessions).forEach(clientId => {\n                if (!clients[clientId]) {\n                    getMqttMessage(\n                        persistentSessions[clientId],\n                        id,\n                        state,\n                        adapter.config.defaultQoS,\n                        !adapter.config.noRetain,\n                        (err, message, persistentClient) =>\n                            message && persistentClient && addMessageWithTopicCheck(persistentClient.messages, message),\n                    );\n                }\n            });\n        });\n    };\n\n    async function updateClientObjects() {\n        if (adapter.config.doNotCreateClientObjects) {\n            return;\n        }\n        if (updateClientsRunning) {\n            updateClientsRestart = true;\n            return;\n        }\n        updateClientsRunning = true;\n        const clientIds = [];\n\n        if (clients) {\n            for (const id in clients) {\n                const _id = id || clients[id].id || clients[id].stream.remoteAddress;\n                const oid = `info.clients.${_id.replace(/[.\\s]+/g, '_')}`;\n                clientIds.push(oid);\n                const clientObj = await adapter.getObjectAsync(oid);\n                if (!clientObj?.native) {\n                    await adapter.setObjectAsync(oid, {\n                        type: 'state',\n                        common: {\n                            name: _id,\n                            role: 'indicator.reachable',\n                            type: 'boolean',\n                            read: true,\n                            write: false,\n                        },\n                        native: {\n                            ip: clients[id].stream.remoteAddress,\n                            port: clients[id].stream.remotePort,\n                        },\n                    });\n                } else if (\n                    clientObj.native.port !== clients[id].stream.remotePort ||\n                    clientObj.native.ip !== clients[id].stream.remoteAddress\n                ) {\n                    clientObj.native.port = clients[id].stream.remotePort;\n                    clientObj.native.ip = clients[id].stream.remoteAddress;\n                    await adapter.setObjectAsync(clientObj._id, clientObj);\n                }\n                await adapter.setStateAsync(oid, true, true);\n            }\n        }\n\n        // read all other states and set alive to false\n        const allStates = await adapter.getStatesAsync('info.clients.*');\n        for (const id in allStates) {\n            if (!clientIds.includes(id.replace(`${adapter.namespace}.`, ''))) {\n                await adapter.setStateAsync(id, false, true);\n            }\n        }\n\n        updateClientsRunning = false;\n        if (updateClientsRestart) {\n            updateClientsRestart = false;\n            startUpdateClientObjects();\n        }\n    }\n\n    function startUpdateClientObjects() {\n        if (updateClientsTimeout) {\n            clearTimeout(updateClientsTimeout);\n            updateClientsTimeout = null;\n        }\n        updateClientsTimeout = setTimeout(() => {\n            updateClientObjects().catch(e => adapter.log.error(`Cannot update client objects: ${e}`));\n        }, 1000);\n    }\n\n    function updateClients() {\n        startUpdateClientObjects();\n\n        adapter.setState('info.connection', { val: clients ? Object.keys(clients).join(', ') : '', ack: true });\n    }\n\n    function getMqttMessage(client, id, state, qos, retain, cb) {\n        if (typeof qos === 'function') {\n            cb = qos;\n            qos = undefined;\n        }\n        if (typeof retain === 'function') {\n            cb = retain;\n            retain = undefined;\n        }\n\n        if (!id2topic[id]) {\n            return adapter.getForeignObject(id, (err, obj) => {\n                if (err) {\n                    return cb(`Client [${client.id}] Cannot resolve topic name for ID: ${id} (err: ${err})`);\n                }\n                if (!obj) {\n                    return cb(`Client [${client.id}] Cannot resolve topic name for ID: ${id} (object not found)`);\n                } else if (!obj._id) {\n                    return cb(\n                        `Client [${client.id}] Cannot resolve topic name for ID: ${id} (object has no id): ${JSON.stringify(obj)}`,\n                    );\n                } else if (!obj.native || !obj.native.topic) {\n                    id2topic[obj._id] = convertID2topic(\n                        obj._id,\n                        null,\n                        adapter.config.prefix,\n                        adapter.namespace,\n                        adapter.config.removePrefix,\n                    );\n                } else {\n                    id2topic[obj._id] = obj.native.topic;\n                }\n\n                const topic = id2topic[obj._id];\n                obj.common ||= {};\n\n                topic2id[topic] ||= { obj, id: obj._id };\n\n                getMqttMessage(client, obj._id, state, qos, retain, cb);\n            });\n        }\n\n        // client has subscription for this ID\n        let message;\n        let topic;\n        let pattern;\n\n        if (client._subsID?.[id]) {\n            topic = id2topic[id];\n\n            let payload;\n            if (!state) {\n                payload = null;\n            } else {\n                if (topic2id[topic].obj && topic2id[topic].obj.common.type === 'file') {\n                    payload = state;\n                    if (!Buffer.isBuffer(payload)) {\n                        payload = null;\n                    }\n                } else {\n                    payload = state2string(state.val);\n                }\n            }\n\n            message = {\n                topic: adapter.config.extraSet && state && !state.ack ? `${topic}/set` : topic,\n                payload,\n                qos: client._subsID[id].qos,\n            };\n        } else {\n            //  Check patterns\n            if (client._subs && (pattern = checkPattern(client._subs, id)) !== null) {\n                topic = id2topic[id];\n                // Cache the value\n                client._subsID ||= {};\n                client._subsID[id] = pattern;\n\n                let payload;\n                if (!state) {\n                    payload = null;\n                } else {\n                    if (topic2id[topic].obj && topic2id[topic].obj.common.type === 'file') {\n                        payload = state;\n                        if (!Buffer.isBuffer(payload)) {\n                            payload = null;\n                        }\n                    } else {\n                        payload = state2string(state.val);\n                    }\n                }\n\n                message = {\n                    topic: adapter.config.extraSet && state && !state.ack ? `${topic}/set` : topic,\n                    payload,\n                    qos: pattern.qos,\n                };\n            }\n        }\n\n        if (message) {\n            message = addMessageAttributes(message, { qos, retain });\n        }\n\n        cb(null, message, client);\n    }\n\n    function getNextMessageId() {\n        const id = messageId;\n\n        messageId++;\n        if (messageId > 65535) {\n            messageId = 1;\n        }\n\n        return id;\n    }\n\n    function addMessageAttributes(message, attributes) {\n        message = Object.assign(message, {\n            qos: message.qos === undefined ? attributes.qos : message.qos,\n            retain: attributes.retain,\n            messageId: messageId,\n            ts: Date.now(),\n            count: 0,\n            cmd: 'publish',\n        });\n\n        return message;\n    }\n\n    function sendMessage2Client(client, topic, payload, qos, retain, binary) {\n        const message = addMessageAttributes(\n            { topic, payload, binary },\n            { qos: client._subsID?.[topic] ? client._subsID[topic].qos : undefined, retain },\n        );\n        if (message) {\n            message.payload = state2string(payload);\n            if (adapter.config.debug) {\n                adapter.log.debug(\n                    `Client [${client.id}] send to this client \"${message.topic}\" (retain: ${message.retain}): ${message.payload !== null ? message.payload : 'deleted'}`,\n                );\n            }\n\n            client.publish(message);\n\n            if (message.qos > 0) {\n                client._messages ||= [];\n                client._messages.push(message);\n            }\n        }\n    }\n\n    function sendState2Client(client, id, state, qos, retain, cb) {\n        if (messageboxRegex.test(id)) {\n            return;\n        }\n\n        getMqttMessage(client, id, state, qos, retain, (err, message, client) => {\n            if (message) {\n                if (adapter.config.debug) {\n                    adapter.log.debug(\n                        `Client [${client.id}] send to this client \"${message.topic}\": ${message.payload !== null ? message.payload : 'deleted'}`,\n                    );\n                }\n\n                client.publish(message);\n\n                if (message.qos > 0) {\n                    client._messages ||= [];\n                    client._messages.push(message);\n                }\n            }\n\n            cb?.(id);\n        });\n    }\n\n    function sendStates2Client(client, list) {\n        if (list?.length) {\n            const id = list.shift();\n            sendState2Client(client, id, states[id], 0, !adapter.config.noRetain, () =>\n                setTimeout(() => sendStates2Client(client, list), adapter.config.sendInterval),\n            );\n        } else {\n            //return;\n        }\n    }\n\n    function resendMessages2Client(client, messages, i) {\n        i ||= 0;\n        if (messages && i < messages.length) {\n            try {\n                messages[i].ts = Date.now();\n                messages[i].count++;\n                adapter.log.debug(\n                    `Client [${client.id}] Resend messages on connect: ${messages[i].topic} and id ${messages[i].messageId} (${messages[i].cmd}) = ${messages[i].payload}`,\n                );\n                if (messages[i].cmd === 'publish') {\n                    messages[i].messageId = getNextMessageId();\n                    client.publish(messages[i]);\n                }\n            } catch (e) {\n                adapter.log.warn(`Client [${client.id}] Cannot resend message: ${e}`);\n            }\n\n            if (adapter.config.sendInterval) {\n                setTimeout(() => resendMessages2Client(client, messages, i + 1), adapter.config.sendInterval);\n            } else {\n                setImmediate(() => resendMessages2Client(client, messages, i + 1));\n            }\n        } else {\n            // return;\n        }\n    }\n\n    /*\n     4.7.1.2 Multi-level wildcard\n\n     The number sign (‘#’ U+0023) is a wildcard character that matches any number of levels within a topic. The multi-level wildcard represents the parent and any number of child levels. The multi-level wildcard character MUST be specified either on its own or following a topic level separator. In either case it MUST be the last character specified in the Topic Filter [MQTT-4.7.1-2].\n\n     Non-normative comment,\n     For example, if a Client subscribes to “sport/tennis/player1/#”, it would receive messages published using these topic names:\n     ·         “sport/tennis/player1”\n     ·         “sport/tennis/player1/ranking”\n     ·         “sport/tennis/player1/score/wimbledon”\n\n     Non-normative comment\n     ·         “sport/#” also matches the singular “sport”, since # includes the parent level.\n     ·         “#” is valid and will receive every Application Message\n     ·         “sport/tennis/#” is valid\n     ·         “sport/tennis#” is not valid\n     ·         “sport/tennis/#/ranking” is not valid\n\n     */\n    function checkPattern(patterns, id) {\n        const pattern = Object.keys(patterns).find(p => patterns[p].regex.test(id));\n\n        return pattern ? patterns[pattern] : null;\n    }\n\n    async function processTopic(id, topic, message, qos, retain, isAck, ignoreClient) {\n        if (id === `${adapter.namespace}.info.connection`) {\n            adapter.log.debug(`Ignore State update for ${id} because adapter internal state.`);\n            return;\n        }\n\n        // expand an old version of objects\n        const messageType = typeof message;\n        const obj = topic2id[topic].obj;\n        if (\n            namespaceRegEx.test(id) &&\n            (!obj.native?.topic ||\n                (obj.common &&\n                    obj.common.type !== 'file' &&\n                    obj.common.type !== 'mixed' &&\n                    obj.common.type !== messageType))\n        ) {\n            if (\n                obj.common &&\n                obj.common.type !== 'file' &&\n                obj.common.type !== 'mixed' &&\n                obj.common.type !== messageType\n            ) {\n                // mqtt topics could change types, but log it to communicate to the user if a type is frequently fluctuating\n                adapter.log.info(`Server: Changed type of \"${id}\" from \"${obj.common.type}\" to \"${messageType}\"`);\n                obj.common.type = messageType;\n            }\n\n            obj.native ||= {};\n            obj.native.topic = topic;\n            try {\n                await adapter.setForeignObjectAsync(id, obj);\n            } catch (e) {\n                adapter.log.error(`Could not update object \"${id}\": ${e.message}`);\n            }\n        }\n\n        adapter.config.debug &&\n            adapter.log.debug(`Server received \"${topic}\" (${typeof message}): ${JSON.stringify(message)}`);\n\n        if (message !== undefined) {\n            let value;\n            if (typeof message === 'object') {\n                value = message;\n            } else {\n                value = { val: message, ack: isAck };\n            }\n            if (\n                value.val !== undefined &&\n                value.val !== null &&\n                namespaceRegEx.test(topic2id[topic].id) &&\n                topic2id[topic].obj?.common &&\n                topic2id[topic].obj.common.type !== 'mixed' &&\n                topic2id[topic].obj.common.type !== typeof value.val\n            ) {\n                adapter.log.info(\n                    `Server: Changed type of \"${topic2id[topic].id}\" from \"${topic2id[topic].obj.common.type}\" to \"mixed\"`,\n                );\n                try {\n                    await adapter.extendObject(topic2id[topic].id, { common: { type: 'mixed' } });\n                } catch (err) {\n                    adapter.log.warn(`Error while updating object \"${topic2id[topic].id}\" for Server: ${err}`);\n                }\n                topic2id[topic].obj.common.type = 'mixed';\n            }\n            try {\n                await adapter.setForeignStateAsync(id, value);\n            } catch {\n                // ignore\n            }\n\n            states[id] = value;\n        } else {\n            states[id] = { val: null, ack: isAck };\n        }\n\n        // send a message to all other clients\n        if (adapter.config.onchange && server && message !== undefined) {\n            setImmediate(() => {\n                if (typeof message !== 'object') {\n                    message = { val: message };\n                }\n\n                Object.keys(clients).forEach(k => {\n                    // if 'get' and 'set' have different topic names, send state to issuing a client too.\n                    if (clients[k] !== ignoreClient || adapter.config.extraSet) {\n                        sendState2Client(clients[k], id, message, qos, retain);\n                    }\n                });\n            });\n        }\n        // ELSE\n        // this will be done indirect. The message will be sent to js-controller, and if adapter is subscribed, it gets this message over stateChange\n    }\n\n    async function checkObject(id, topic, message) {\n        if (isIgnoredTopic(id, ignoredTopicsRegexes)) {\n            return;\n        }\n        topic2id[topic] ||= { id: null };\n\n        adapter.config.debug && adapter.log.debug(`Check object for topic \"${topic}\"`);\n\n        let obj;\n        try {\n            obj = await adapter.getObjectAsync(id);\n        } catch {\n            // ignore\n        }\n\n        if (\n            obj?._id?.startsWith(`${adapter.namespace}.`) &&\n            obj.type === 'folder' &&\n            obj.native?.autocreated === 'by automatic ensure logic'\n        ) {\n            // ignore a default created object because we now have a more defined one\n            obj = null;\n        }\n\n        if (!obj) {\n            try {\n                obj = await adapter.getForeignObjectAsync(id);\n            } catch {\n                // ignore\n            }\n            if (\n                obj?._id?.startsWith(`${adapter.namespace}.`) &&\n                obj.type === 'folder' &&\n                obj.native?.autocreated === 'by automatic ensure logic'\n            ) {\n                // ignore a default created object because we now have a more defined one\n                obj = null;\n            }\n\n            if (!obj) {\n                id = `${adapter.namespace}.${id}`;\n\n                if (adapter.config.ignoreNewObjects) {\n                    adapter.log.warn(`Object ${id} ignored and not created`);\n                    throw new Error(`Object ${id} not exists`);\n                }\n\n                // only for type detection\n                message = convertMessage(topic, message, adapter);\n\n                // create state\n                obj = {\n                    _id: id,\n                    common: {\n                        name: topic,\n                        write: true,\n                        read: true,\n                        role: 'variable',\n                        desc: 'mqtt server variable',\n                        type: adapter.config.allBinaries ? 'file' : message !== undefined ? typeof message : 'string',\n                    },\n                    native: {\n                        topic,\n                    },\n                    type: 'state',\n                };\n                if (\n                    !adapter.config.allBinaries &&\n                    obj.common.type === 'object' &&\n                    message !== undefined &&\n                    message.val !== undefined\n                ) {\n                    obj.common.type = typeof message.val;\n                }\n\n                adapter.log.debug(`Create object for topic: ${topic}[ID: ${id}]`);\n                try {\n                    await adapter.setForeignObjectAsync(id, obj);\n                } catch {\n                    // ignore\n                }\n            } else {\n                adapter.config.debug && adapter.log.debug(`    Found object for topic \"${topic}\" = ${obj._id}`);\n            }\n        } else {\n            adapter.config.debug && adapter.log.debug(`    Found object for topic \"${topic}\" = ${obj._id}`);\n        }\n        if (obj && !obj._id) {\n            obj._id = id;\n        }\n        topic2id[topic].id = obj._id;\n        topic2id[topic].obj = obj;\n\n        // do not wait the finish of the function\n        ensureObjectStructure(adapter, obj._id, verifiedObjects).then(() => {});\n    }\n\n    async function receivedTopic(packet, client) {\n        let isAck = true;\n        let topic = packet.topic;\n        let message = packet.payload;\n        const qos = packet.qos;\n        const retain = packet.retain;\n        const now = Date.now();\n        let id;\n\n        if (adapter.config.extraSet && packet.topic.match(/\\/set$/)) {\n            isAck = false;\n            packet.topic = packet.topic.substring(0, packet.topic.length - 4);\n            topic = packet.topic;\n        }\n\n        if (topic2id[topic]) {\n            id = topic2id[topic].id || convertTopic2id(topic, false, adapter.config.prefix, adapter.namespace);\n        } else {\n            id = convertTopic2id(topic, false, adapter.config.prefix, adapter.namespace);\n        }\n\n        if (!id) {\n            adapter.log.error(`Client [${client.id}] Invalid topic name: ${JSON.stringify(topic)}`);\n            return;\n        }\n        if (isIgnoredTopic(id, ignoredTopicsRegexes)) {\n            return;\n        }\n\n        // If state is unknown => create mqtt.X.topic\n        if (`${adapter.namespace}.${id}`.length > adapter.config.maxTopicLength) {\n            adapter.log.warn(`Client [${client.id}] Topic name is too long: ${id.substring(0, 100)}...`);\n            return;\n        }\n\n        if (!topic2id[topic]) {\n            try {\n                await checkObject(id, topic, message);\n            } catch {\n                return;\n            }\n        } else if (topic2id[topic].id === null) {\n            // still looking for id\n            topic2id[topic].message = message;\n            adapter.config.debug &&\n                adapter.log.debug(\n                    `Client [${client.id}] Server received (but in process) \"${topic}\" (${typeof message}): ${message}`,\n                );\n            return;\n        }\n\n        if (topic2id[topic].message) {\n            // get last received message\n            message = topic2id[topic].message;\n            delete topic2id[topic].message;\n        }\n\n        if (topic2id[topic].obj && topic2id[topic].obj.common.type !== 'file') {\n            message = convertMessage(topic, message, adapter, client.id);\n        }\n\n        if (qos) {\n            Object.keys(persistentSessions).forEach(clientId => {\n                if (clientId !== client.id && !persistentSessions[clientId].connected) {\n                    // try to collect this message if a client subscribed\n                    getMqttMessage(\n                        persistentSessions[clientId],\n                        id,\n                        message,\n                        adapter.config.defaultQoS,\n                        true,\n                        (err, sendMessage, persistentClient) =>\n                            // if sendMessage is defined, then the message should be delivered because subscribed, but we deliver the original message\n                            sendMessage &&\n                            persistentClient &&\n                            addMessageWithTopicCheck(persistentClient.messages, {\n                                topic,\n                                qos,\n                                retain,\n                                messageId: packet.messageId || sendMessage.messageId,\n                                ts: now,\n                                payload: message,\n                                count: 0,\n                                cmd: 'publish',\n                            }),\n                    );\n                }\n            });\n        }\n\n        await processTopic(topic2id[topic].id, topic, message, qos, retain, isAck, client);\n    }\n\n    function addMessageWithTopicCheck(arr, message) {\n        for (const i in arr) {\n            if (arr[i].topic === message.topic) {\n                // if same topic we do not add a new entry, but pot. update existing of newer\n                if (message.ts > arr[i].ts) {\n                    arr[i] = message;\n                }\n                return false;\n            }\n        }\n        arr.push(message);\n    }\n\n    function clientClose(client, reason) {\n        if (!client) {\n            return;\n        }\n\n        if (persistentSessions[client.id]) {\n            persistentSessions[client.id].connected = false;\n        }\n\n        if (client._sendOnStart) {\n            clearTimeout(client._sendOnStart);\n            client._sendOnStart = null;\n        }\n        if (client._resendonStart) {\n            clearTimeout(client._resendonStart);\n            client._resendonStart = null;\n        }\n\n        try {\n            if (clients[client.id] && client.__secret === clients[client.id].__secret) {\n                adapter.log.info(`Client [${client.id}] connection closed: ${reason}`);\n                delete clients[client.id];\n                updateClients();\n                if (client._will && reason !== 'disconnected') {\n                    receivedTopic(client._will, client)\n                        .catch(() => null) // ignore\n                        .then(() => client.destroy());\n                } else {\n                    client.destroy();\n                }\n            } else {\n                client.destroy();\n            }\n        } catch (e) {\n            adapter.log.warn(`Client [${client.id}] Cannot close client: ${e}`);\n        }\n    }\n\n    function validateRequest(type, client, config) {\n        if (config.user && !client.authenticated) {\n            adapter.log.warn(`Client [${client.id}] sends ${type} after unsuccessful authentication. Ignore!`);\n            return false;\n        }\n\n        if (clients[client.id] && client.__secret !== clients[client.id].__secret) {\n            adapter.log.debug(\n                `Old client ${client.id} with secret ${client.__secret} sends ${type}. Ignore! Actual secret is ${clients[client.id].__secret}`,\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    function startServer(config, socket, server, port, bind, ssl, ws) {\n        // Event variable to hold connection event type\n        let connectionEvent;\n\n        // Check if SSL/TLS connection is required\n        if (config.ssl) {\n            // Set event variable to SSL/TLS connection\n            connectionEvent = 'secureConnection';\n        } else {\n            // Set event variable to plain TCP connection\n            connectionEvent = 'connection';\n        }\n\n        // Use event variable to start the connection\n        socket.on(connectionEvent, stream => {\n            let client;\n            if (ws) {\n                client = mqtt(wsStream(stream));\n            } else {\n                client = mqtt(stream);\n            }\n\n            // Store unique connection identifier\n            client.__secret = `${Date.now()}_${Math.round(Math.random() * 10000)}`;\n\n            client.on('connect', options => {\n                // set client id\n                client.id = options.clientId;\n                if (adapter.config.forceCleanSession === 'clean') {\n                    client.cleanSession = true;\n                } else if (adapter.config.forceCleanSession === 'keep') {\n                    client.cleanSession = false;\n                } else {\n                    // The old logic always resulted in 'undefined' when cleanSession was not active,\n                    // because options.cleanSession was undefined. This led to client.cleanSession being set to undefined.\n                    // client.cleanSession = options.cleanSession === undefined ? options.cleanSession : options.clean;\n\n                    // The improved logic below should be better:\n                    client.cleanSession = options.cleanSession !== undefined ? options.cleanSession : options.clean;\n                }\n\n                client._keepalive = options.keepalive;\n\n                // get possible an old client\n                const oldClient = clients[client.id];\n\n                if (config.user) {\n                    if (config.user !== options.username || config.pass !== (options.password || '').toString()) {\n                        adapter.log.warn(\n                            `Client [${client.id}] has invalid password(${options.password}) or username(${options.username})`,\n                        );\n                        client.authenticated = false;\n                        client.connack({ returnCode: 4 });\n                        if (oldClient) {\n                            // delete existing client\n                            delete clients[client.id];\n                            updateClients();\n                            oldClient.destroy();\n                        }\n                        client.destroy();\n                        return;\n                    }\n                    client.authenticated = true;\n                }\n\n                if (oldClient) {\n                    adapter.log.info(\n                        `Client [${client.id}] reconnected. Old secret ${clients[client.id].__secret}. New secret ${client.__secret}`,\n                    );\n                    // need to destroy the old client\n\n                    if (client.__secret !== clients[client.id].__secret) {\n                        // it is another socket!!\n                        // It was following situation:\n                        // - old connection was active\n                        // - new connection is on the same TCP\n                        // Just forget him\n                        // oldClient.destroy();\n                    }\n                } else {\n                    adapter.log.info(`Client [${client.id}] connected with secret ${client.__secret}`);\n                }\n\n                let sessionPresent = false;\n\n                if (!client.cleanSession && adapter.config.storeClientsTime !== 0) {\n                    if (persistentSessions[client.id]) {\n                        sessionPresent = true;\n                        persistentSessions[client.id].lastSeen = Date.now();\n                    } else {\n                        persistentSessions[client.id] = {\n                            _subsID: {},\n                            _subs: {},\n                            messages: [],\n                            lastSeen: Date.now(),\n                        };\n                    }\n                    client._messages = persistentSessions[client.id].messages || [];\n                    persistentSessions[client.id].connected = true;\n                } else if (client.cleanSession && persistentSessions[client.id]) {\n                    delete persistentSessions[client.id];\n                }\n                client._messages ||= [];\n\n                client.connack({ returnCode: 0, sessionPresent });\n                clients[client.id] = client;\n                updateClients();\n\n                if (options.will) {\n                    // the client's will message options. object that supports the following properties:\n                    // topic:   the will topic. string\n                    // payload: the will payload. string\n                    // qos:     will qos level. number\n                    // retain:  will retain flag. boolean\n                    client._will = JSON.parse(JSON.stringify(options.will));\n                    let id;\n                    if (topic2id[client._will.topic]) {\n                        id =\n                            topic2id[client._will.topic].id ||\n                            convertTopic2id(client._will.topic, false, config.prefix, adapter.namespace);\n                    } else {\n                        id = convertTopic2id(client._will.topic, false, config.prefix, adapter.namespace);\n                    }\n                    checkObject(id, client._will.topic, options.will.payload)\n                        .then(() => {\n                            // something went wrong while JSON.parse, so the payload of last will not be handled correct as buffer\n                            client._will.payload = options.will.payload;\n                            adapter.log.debug(`Client [${client.id}] with last will ${JSON.stringify(client._will)}`);\n                        })\n                        .catch(err => adapter.log.info(err.message));\n                }\n\n                // Send all subscribed variables to a client\n                if (config.publishAllOnStart) {\n                    // Give to client 2 seconds to send subscribe\n                    client._sendOnStart = setTimeout(() => {\n                        client._sendOnStart = null;\n                        sendStates2Client(client, Object.keys(states));\n                    }, adapter.config.sendOnStartInterval);\n                }\n\n                if (persistentSessions[client.id]) {\n                    client._subsID = persistentSessions[client.id]._subsID;\n                    client._subs = persistentSessions[client.id]._subs;\n                    if (persistentSessions[client.id].messages.length) {\n                        // give to the client a little bit time\n                        client._resendonStart = setTimeout(\n                            clientId => {\n                                client._resendonStart = null;\n                                persistentSessions[clientId] &&\n                                    resendMessages2Client(client, persistentSessions[clientId].messages);\n                            },\n                            100,\n                            client.id,\n                        );\n                    }\n                }\n\n                //set timeout for stream to 1,5 times keepalive [MQTT-3.1.2-24].\n                if (!ws && client._keepalive !== 0) {\n                    const streamTimeoutSec = 1.5 * client._keepalive;\n                    stream.setTimeout(streamTimeoutSec * 1000);\n\n                    adapter.log.debug(\n                        `Client [${client.id}] with keepalive ${client._keepalive} set timeout to ${streamTimeoutSec} seconds`,\n                    );\n                }\n            });\n\n            // only when we are the RECEIVER of the message\n            client.on('publish', async packet => {\n                if (!validateRequest('publish', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received publish package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                if (packet.qos === 1) {\n                    // send PUBACK to a client\n                    client.puback({ messageId: packet.messageId });\n                } else if (packet.qos === 2) {\n                    const pack = client._messages?.find(e => e.messageId === packet.messageId);\n                    if (pack) {\n                        // duplicate message => ignore\n                        adapter.log.info(\n                            `Client [${client.id}] Ignored duplicate message with ID: ${packet.messageId}`,\n                        );\n                        return;\n                    }\n                    packet.ts = Date.now();\n                    packet.cmd = 'pubrel';\n                    packet.count = 0;\n                    client._messages ||= [];\n                    client._messages.push(packet);\n\n                    client.pubrec({ messageId: packet.messageId });\n                    return;\n                }\n\n                await receivedTopic(packet, client);\n            });\n\n            // response for QoS2\n            // only when we are the SENDER of the message\n            client.on('pubrec', packet => {\n                if (!validateRequest('pubrec', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received pubrec package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                // remove this message from queue\n                const frame = client._messages?.find(e => e.messageId === packet.messageId);\n                if (frame) {\n                    client.pubrel({ messageId: packet.messageId });\n                } else {\n                    adapter.log.info(\n                        `Client [${client.id}] Received pubrec on ${client.id} for unknown messageId ${packet.messageId}`,\n                    );\n                }\n            });\n\n            // response for QoS2\n            // only when we are the SENDER of the message\n            client.on('pubcomp', packet => {\n                if (!validateRequest('pubcomp', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received pubcomp package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                let pos = -1;\n                // remove this message from queue\n                if (client._messages) {\n                    pos = client._messages.findIndex(e => e.messageId === packet.messageId);\n                }\n                if (pos !== -1) {\n                    client._messages.splice(pos, 1);\n                } else {\n                    adapter.log.info(\n                        `Client [${client.id}] Received pubcomp for unknown message ID: ${packet.messageId}`,\n                    );\n                }\n            });\n\n            // response for QoS2\n            // only when we are the RECEIVER of the message\n            client.on('pubrel', async packet => {\n                if (!validateRequest('pubrel', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received pubrel package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                // remove this message from queue\n                let pos = -1;\n                // remove this message from queue\n                if (client._messages) {\n                    pos = client._messages.findIndex(e => e.messageId === packet.messageId);\n                }\n                if (pos !== -1) {\n                    client.pubcomp({ messageId: packet.messageId });\n                    await receivedTopic(client._messages[pos], client);\n                    client._messages.splice(pos, 1);\n                } else {\n                    adapter.log.info(\n                        `Client [${client.id}] Received pubrel for unknown message ID: ${packet.messageId}`,\n                    );\n                }\n            });\n\n            // response for QoS1\n            client.on('puback', packet => {\n                if (!validateRequest('puback', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received puback package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                // remove this message from queue\n                let pos = -1;\n                // remove this message from queue\n                if (client._messages) {\n                    pos = client._messages.findIndex(e => e.messageId === packet.messageId);\n                }\n                if (pos !== -1) {\n                    adapter.log.debug(\n                        `Client [${client.id}] Received puback for ${client.id} message ID: ${packet.messageId}`,\n                    );\n                    client._messages.splice(pos, 1);\n                } else {\n                    adapter.log.info(\n                        `Client [${client.id}] Received puback for unknown message ID: ${packet.messageId}`,\n                    );\n                }\n            });\n\n            client.on('subscribe', async packet => {\n                if (!validateRequest('subscribe', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received subscribe package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                const granted = [];\n                client._subsID ||= {};\n                client._subs ||= {};\n\n                for (let i = 0; i < packet.subscriptions.length; i++) {\n                    adapter.log.debug(\n                        `Client [${client.id}] Handle subscribe: ${JSON.stringify(packet.subscriptions[i])}`,\n                    );\n                    granted.push(packet.subscriptions[i].qos);\n\n                    const topic = packet.subscriptions[i].topic;\n                    let id;\n\n                    if (topic2id[topic]) {\n                        id = topic2id[topic].id || convertTopic2id(topic, false, config.prefix, adapter.namespace);\n                    } else {\n                        id = convertTopic2id(topic, false, config.prefix, adapter.namespace);\n                    }\n\n                    if (!id) {\n                        adapter.log.error(`Client [${client.id}] Invalid topic: ${topic}`);\n                        continue;\n                    }\n\n                    // if pattern without wildcards\n                    if (!id.includes('*') && !id.includes('#') && !id.includes('+')) {\n                        // If state is unknown => create mqtt.X.topic\n                        if (!topic2id[topic]) {\n                            try {\n                                await checkObject(id, topic);\n                            } catch {\n                                return;\n                            }\n                        }\n\n                        client._subsID[topic2id[topic].id] = {\n                            id: topic2id[topic].id,\n                            qos: packet.subscriptions[i].qos,\n                        };\n                        adapter.log.info(`Client [${client.id}] subscribes on \"${topic2id[topic].id}\"`);\n\n                        if (adapter.config.publishOnSubscribe) {\n                            setTimeout(() => {\n                                adapter.log.info(`Client [${client.id}] publishOnSubscribe`);\n                                sendState2Client(client, topic2id[topic].id, states[topic2id[topic].id]);\n                            }, 200);\n                        }\n                    } else {\n                        let pattern = topic;\n                        // remove prefix\n                        if (pattern.startsWith(adapter.config.prefix)) {\n                            pattern = pattern.substring(adapter.config.prefix.length);\n                        }\n                        pattern = pattern.replace(/\\//g, '.');\n                        if (pattern[0] === '.') {\n                            pattern = pattern.substring(1);\n                        }\n\n                        // add a simple pattern\n                        let regText = pattern2RegEx(pattern, adapter);\n                        client._subs[topic] = {\n                            regex: new RegExp(regText),\n                            qos: packet.subscriptions[i].qos,\n                            pattern: pattern,\n                        };\n                        adapter.log.info(`Client [${client.id}] subscribes on \"${topic}\" with regex /${regText}/`);\n\n                        // add simple mqtt.0.pattern\n                        pattern = `${adapter.namespace}/${pattern}`;\n                        regText = pattern2RegEx(pattern, adapter);\n                        client._subs[`${adapter.namespace}/${topic}`] = {\n                            regex: new RegExp(regText),\n                            qos: packet.subscriptions[i].qos,\n                            pattern,\n                        };\n                        adapter.log.info(`Client [${client.id}] subscribes on \"${topic}\"  with regex /${regText}/`);\n\n                        if (adapter.config.publishOnSubscribe) {\n                            setTimeout(() => {\n                                adapter.log.info(`Client [${client.id}] publishOnSubscribe send all known states`);\n                                Object.keys(states).forEach(savedId => {\n                                    if (checkPattern(client._subs, savedId)) {\n                                        sendState2Client(client, savedId, states[savedId]);\n                                    }\n                                });\n                            }, 200);\n                        }\n                    }\n                }\n\n                client.suback({ granted: granted, messageId: packet.messageId });\n            });\n\n            client.on('unsubscribe', packet => {\n                if (!validateRequest('unsubscribe', client, config)) {\n                    return;\n                }\n\n                if (adapter.config.debug) {\n                    adapter.log.debug(`Client [${client.id}] received unsubscribe package ${JSON.stringify(packet)}`);\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                for (let i = 0; i < packet.unsubscriptions.length; i++) {\n                    const topic = packet.unsubscriptions[i];\n                    let id;\n\n                    if (topic2id[topic]) {\n                        id = topic2id[topic].id || convertTopic2id(topic, false, config.prefix, adapter.namespace);\n                    } else {\n                        id = convertTopic2id(topic, false, config.prefix, adapter.namespace);\n                    }\n\n                    if (!id) {\n                        adapter.log.error(`Client [${client.id}] unsubscribes from invalid topic: ${topic}`);\n                        continue;\n                    }\n\n                    // if pattern without wildcards\n                    if (!id.includes('*') && !id.includes('#') && !id.includes('+')) {\n                        // If the state is known\n                        if (topic2id[topic]) {\n                            const _id = topic2id[topic].id;\n                            if (client._subsID?.[_id]) {\n                                delete client._subsID[_id];\n                                adapter.log.info(`Client [${client.id}] unsubscribes on \"${_id}\"`);\n                            } else {\n                                adapter.log.info(`Client [${client.id}] unsubscribes on unknown \"${_id}\"`);\n                            }\n                        } else {\n                            adapter.log.info(`Client [${client.id}] unsubscribes on unknown topic \"${topic}\"`);\n                        }\n                    } else {\n                        let pattern = topic.replace(/\\//g, '.');\n                        if (pattern[0] === '.') {\n                            pattern = pattern.substring(1);\n                        }\n\n                        // add a simple pattern\n                        if (client._subs?.[topic]) {\n                            adapter.log.info(`Client [${client.id}] unsubscribes on \"${topic}\"`);\n                            delete client._subs[topic];\n                            if (client._subs[`${adapter.namespace}/${topic}`]) {\n                                // add simple mqtt.0.pattern\n                                delete client._subs[`${adapter.namespace}/${topic}`];\n                                adapter.log.info(\n                                    `Client [${client.id}] unsubscribes on \"${adapter.namespace}/${topic}\"`,\n                                );\n                            }\n                        } else {\n                            adapter.log.info(`Client [${client.id}] unsubscribes on unknown \"${topic}\"`);\n                        }\n                    }\n                }\n                client.unsuback({ messageId: packet.messageId });\n            });\n\n            client.on('pingreq', (/*packet*/) => {\n                if (!validateRequest('pingreq', client, config)) {\n                    return;\n                }\n\n                if (persistentSessions[client.id]) {\n                    persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                adapter.log.debug(`Client [${client.id}] pingreq`);\n                client.pingresp();\n            });\n\n            // connection error handling\n            client.on('close', hadError => clientClose(client, hadError ? 'closed because of error' : 'closed'));\n            client.on('error', e => clientClose(client, e));\n            client.on('disconnect', () => clientClose(client, 'disconnected'));\n\n            // client lost without a close\n            stream.on('timeout', () => clientClose(client, 'timeout'));\n        });\n        (server || socket)\n            .listen(port, bind, () => {\n                adapter.log.info(\n                    `Starting MQTT${ws ? '-WebSocket' : ''}${ssl ? ' (Secure)' : ''}${config.user ? ' authenticated' : ''} server on ${bind || '0.0.0.0'}:${port}`,\n                );\n                adapter.log.debug(`The MQTT server${ws ? ' (WebSocket)' : ''} has succesfully started!`);\n            })\n            .on('error', err =>\n                adapter.log.error(\n                    `Error starting MQTT (Setting up listener)${ws ? '-WebSocket' : ''}${ssl ? ' (Secure)' : ''}${config.user ? ' authenticated' : ''} server on ${bind || '0.0.0.0'}:${port}: ${err}`,\n                ),\n            );\n    }\n\n    function checkResends() {\n        const now = Date.now();\n        resending = true;\n        for (const clientId in clients) {\n            if (Object.prototype.hasOwnProperty.call(clients, clientId) && clients[clientId]?._messages) {\n                for (let m = clients[clientId]._messages.length - 1; m >= 0; m--) {\n                    const message = clients[clientId]._messages[m];\n                    if (now - message.ts >= adapter.config.retransmitInterval) {\n                        if (message.count > adapter.config.retransmitCount) {\n                            adapter.log.warn(\n                                `Client [${clientId}] Message ${message.messageId} deleted after ${message.count} retries`,\n                            );\n                            clients[clientId]._messages.splice(m, 1);\n                            continue;\n                        }\n\n                        // resend this message\n                        message.count++;\n                        message.ts = now;\n                        try {\n                            adapter.log.debug(\n                                `Client [${clientId}] Resend for ${message.cmd} message topic: ${message.topic}, payload: ${message.payload}`,\n                            );\n                            if (message.cmd === 'publish') {\n                                message.dup = true;\n                                clients[clientId].publish(message);\n                            } else if (message.cmd === 'pubrel') {\n                                clients[clientId].pubrec({\n                                    messageId: message.messageId,\n                                });\n                            }\n                        } catch (e) {\n                            adapter.log.warn(`Client [${clientId}] Cannot publish message: ${e}`);\n                        }\n\n                        if (adapter.config.sendInterval) {\n                            setTimeout(checkResends, adapter.config.sendInterval);\n                        } else {\n                            setImmediate(checkResends);\n                        }\n                        return;\n                    }\n                }\n            }\n        }\n\n        // delete old sessions\n        if (adapter.config.storeClientsTime !== -1) {\n            Object.keys(persistentSessions).forEach(id => {\n                if (\n                    !persistentSessions[id] ||\n                    now - persistentSessions[id].lastSeen > adapter.config.storeClientsTime * 60000\n                ) {\n                    delete persistentSessions[id];\n                }\n            });\n        }\n\n        resending = false;\n    }\n\n    (function _constructor(config) {\n        // create a connected object and state\n        adapter.getObject('info.connection', (err, obj) => {\n            if (!obj?.common || obj.common.type !== 'string') {\n                obj = {\n                    _id: 'info.connection',\n                    type: 'state',\n                    common: {\n                        role: 'info.clients',\n                        name: {\n                            en: 'List of connected clients',\n                            de: 'Liste der verbundenen Clients',\n                            ru: 'Список подключенных клиентов',\n                            it: 'Elenco dei client connessi',\n                            es: 'Lista de clientes conectados',\n                            pt: 'Lista de clientes conectados',\n                            nl: 'Lijst van verbonden clients',\n                            fr: 'Liste des clients connectés',\n                            pl: 'Lista podłączonych klientów',\n                            uk: 'Список підключених клієнтів',\n                            'zh-cn': '已连接客户端的列表',\n                        },\n                        type: 'string',\n                        read: true,\n                        write: false,\n                        def: '',\n                    },\n                    native: {},\n                };\n\n                adapter.setObject('info.connection', obj, () => updateClients());\n            } else {\n                updateClients();\n            }\n        });\n\n        config.port = parseInt(config.port, 10) || 1883;\n        if (config.port < 0 || config.port > 65535) {\n            adapter.log.error(`Port ${config.port} is invalid, using 1883.`);\n            config.port = 1883;\n        }\n        config.retransmitInterval ||= 2000;\n        config.retransmitCount ||= 10;\n        if (config.storeClientsTime === undefined) {\n            config.storeClientsTime = 1440;\n        } else {\n            config.storeClientsTime = parseInt(config.storeClientsTime, 10) || 0;\n        }\n\n        config.defaultQoS = parseInt(config.defaultQoS, 10) || 0;\n\n        if (config.ssl) {\n            net ||= require('tls');\n            if (config.webSocket) {\n                http ||= require('https');\n            }\n        } else {\n            net ||= require('net');\n            if (config.webSocket) {\n                http ||= require('http');\n            }\n        }\n\n        try {\n            // If using MQTTs, then create a TLS server with tls.createServer(), it's better for the TLS handshake.\n            // Otherwise, the server may not send MQTT-CONNACK, and protocol handling could fail.\n            server = config.ssl ? require('tls').createServer(config.certificates) : require('net').createServer();\n        } catch (err) {\n            adapter.log.error(`Cannot create server: ${err}`);\n            adapter.terminate\n                ? adapter.terminate(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                : process.exit(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n            return;\n        }\n        server.on('error', err => {\n            adapter.log.error(`Cannot create server: ${err}`);\n            adapter.terminate\n                ? adapter.terminate(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                : process.exit(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n        });\n\n        try {\n            adapter.log.debug(`The MQTT server is starting now...`);\n            startServer(config, server, null, config.port, config.bind, config.ssl, false);\n        } catch (err) {\n            adapter.log.error(`Cannot create server: ${err}`);\n            adapter.terminate\n                ? adapter.terminate(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                : process.exit(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n            return;\n        }\n        if (config.webSocket) {\n            http ||= require('https');\n            ws ||= require('ws');\n            wsStream ||= require('websocket-stream');\n            serverForWs = http.createServer(config.certificates);\n            serverWs = new ws.Server({ server: serverForWs });\n\n            try {\n                adapter.log.debug(`The MQTT server (Websocket) is starting now...`);\n                startServer(config, serverWs, serverForWs, config.port + 1, config.bind, config.ssl, true);\n            } catch (err) {\n                adapter.log.error(`Cannot create server: ${err}`);\n                adapter.terminate\n                    ? adapter.terminate(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                    : process.exit(adapter.EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n                return;\n            }\n        }\n\n        resendTimer = setInterval(() => !resending && checkResends(), adapter.config.retransmitInterval || 2000);\n    })(adapter.config);\n\n    return this;\n}\n\nmodule.exports = MQTTServer;\n"]}