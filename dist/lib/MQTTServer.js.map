{"version":3,"file":"MQTTServer.js","sourceRoot":"","sources":["../../src/lib/MQTTServer.ts"],"names":[],"mappings":"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","sourcesContent":["import { EXIT_CODES } from '@iobroker/adapter-core';\nimport type { MqttAdapterConfig, MqttPattern, MqttTopic } from './types';\n// @ts-expect-error no types\nimport mqtt from 'mqtt-connection';\nimport {\n    state2string,\n    convertTopic2id,\n    convertID2topic,\n    ensureObjectStructure,\n    isIgnoredTopic,\n    pattern2RegEx,\n    convertMessage,\n} from './common';\nimport { createServer as createHttpsServer, type Server as HttpsServer } from 'https';\nimport { createServer as createHttpServer, type Server as HttpServer } from 'http';\nimport { createServer as createTlsServer, type Server as TlsServer } from 'tls';\nimport { createServer as createNetServer, type Server as NetServer } from 'net';\nimport { Server as WsServer } from 'ws';\nimport wsStream from 'websocket-stream';\n\n// todo delete from persistentSessions the sessions and messages after some time\ntype HttpHttpsServer = HttpsServer | HttpServer;\ntype Server = TlsServer | NetServer;\ntype MqttMessage = {\n    topic: string;\n    payload: string | null;\n    qos: 0 | 1 | 2;\n    retain: boolean;\n    messageId: number;\n    ts?: number;\n    count?: number;\n    cmd?: 'pubreq' | 'publish' | 'pubrel';\n    dup?: boolean;\n    binary?: boolean;\n};\n\ninterface PersistentSession {\n    id: string;\n    _subsID?: {\n        [id: string]: {\n            regex: RegExp;\n            qos: 0 | 1 | 2;\n            pattern: MqttPattern;\n        };\n    };\n    _subs?: {\n        [topic: string]: {\n            regex: RegExp;\n            qos: 0 | 1 | 2;\n            pattern: MqttPattern;\n        };\n    };\n    _messages: MqttMessage[];\n    connected?: boolean;\n    lastSeen: number;\n}\n\ninterface MqttConnection {\n    id: string;\n    stream: any;\n    _messages: MqttMessage[];\n    _sendOnStart?: NodeJS.Timeout | null;\n    _resendonStart?: NodeJS.Timeout | null;\n    __secret?: string;\n    _will: {\n        topic: string;\n        payload: string;\n        qos: 0 | 1 | 2;\n        retain: boolean;\n    };\n    destroy: () => void;\n    _subsID?: {\n        [id: string]: {\n            regex: RegExp;\n            qos: 0 | 1 | 2;\n            pattern: MqttPattern;\n        };\n    };\n    _subs?: {\n        [topic: string]: {\n            regex: RegExp;\n            qos: 0 | 1 | 2;\n            pattern: MqttPattern;\n        };\n    };\n    cleanSession?: boolean;\n    _keepalive: number;\n    authenticated?: boolean;\n\n    publish: (message: MqttMessage) => void;\n    pubrec: (message: { messageId: number }) => void;\n    connack: (message: { returnCode: number; sessionPresent?: boolean }) => void;\n    puback: (message: { messageId: number }) => void;\n    unsuback: (message: { messageId: number }) => void;\n    pingresp: () => void;\n    suback: (message: { messageId: number; granted: number[] }) => void;\n    pubrel: (message: { messageId: number }) => void;\n    pubcomp: (message: { messageId: number }) => void;\n    on(\n        event:\n            | 'publish'\n            | 'connect'\n            | 'pubrec'\n            | 'pubcomp'\n            | 'pubrel'\n            | 'puback'\n            | 'subscribe'\n            | 'unsubscribe'\n            | 'close'\n            | 'disconnect'\n            | 'error'\n            | 'pingreq',\n        callback: (message: any) => void,\n    ): void;\n}\n\nconst messageboxRegex = new RegExp('\\\\.messagebox$');\n\nexport default class MQTTServer {\n    private readonly adapter: ioBroker.Adapter;\n    private readonly config: MqttAdapterConfig;\n    private readonly namespaceRegEx: RegExp;\n    private server: Server | null = null;\n    private serverWs: WsServer | null = null;\n    private serverForWs: HttpHttpsServer | null = null;\n    private readonly clients: { [clientID: string]: MqttConnection } = {};\n    private readonly topic2id: Record<\n        MqttTopic,\n        {\n            processing?: boolean;\n            obj: ioBroker.StateObject | null;\n            id: string;\n            isAck?: boolean;\n            message?: ioBroker.StateValue | ioBroker.State;\n        }\n    > = {};\n    private readonly id2topic: Record<string, MqttTopic> = {};\n    private messageId = 1;\n    private persistentSessions: {\n        [clientId: string]: PersistentSession;\n    } = {};\n    private resending = false;\n    private resendTimer: NodeJS.Timeout | null = null;\n    private readonly verifiedObjects = {};\n    private channelChecked = false;\n    private updateClientsTimeout: NodeJS.Timeout | null = null;\n    private updateClientsRunning = false;\n    private updateClientsRestart = false;\n\n    private readonly ignoredTopicsRegexes: RegExp[] = [];\n    private readonly ignoredTopics: string[] = [];\n    private readonly states: Record<string, ioBroker.State>;\n\n    constructor(adapter: ioBroker.Adapter, states: Record<string, ioBroker.State>) {\n        this.adapter = adapter;\n        this.config = adapter.config as MqttAdapterConfig;\n        this.namespaceRegEx = new RegExp(`^${this.adapter.namespace.replace('.', '\\\\.')}\\\\.`);\n        this.ignoredTopics = this.config.ignoredTopics?.split(',') ?? [];\n        this.states = states;\n\n        for (const ignoredTopicPattern of this.ignoredTopics) {\n            if (!ignoredTopicPattern) {\n                // Empty strings would filter out all topics, which is probably not what the user wants\n                this.ignoredTopics.length > 1 && this.adapter.log.warn(`Ignored topics should not end with an \",\".`);\n                continue;\n            }\n            const ignoredTopicRegexWithNameSpace = pattern2RegEx(\n                `${this.adapter.namespace}.${ignoredTopicPattern}`,\n                adapter,\n            );\n            const ignoredTopicRegex = pattern2RegEx(ignoredTopicPattern, adapter);\n            this.adapter.log.info(\n                `Ignoring topic with pattern: ${ignoredTopicPattern} (RegExp: ${ignoredTopicRegex} und ${ignoredTopicRegexWithNameSpace})`,\n            );\n            this.ignoredTopicsRegexes.push(new RegExp(ignoredTopicRegex), new RegExp(ignoredTopicRegexWithNameSpace));\n        }\n        this.config.sendOnStartInterval = parseInt(this.config.sendOnStartInterval as unknown as string, 10) || 2000;\n        this.config.sendInterval = parseInt(this.config.sendInterval as unknown as string, 10) || 0;\n        this.init();\n    }\n\n    destroy(cb?: () => void): void {\n        if (this.resendTimer) {\n            clearInterval(this.resendTimer);\n            this.resendTimer = null;\n        }\n        this.persistentSessions = {};\n\n        let tasks = 0;\n        let timeout: NodeJS.Timeout | null = null;\n        if (cb) {\n            timeout = setTimeout(() => {\n                timeout = null;\n                if (cb) {\n                    cb();\n                    cb = undefined;\n                }\n            }, 2000);\n        }\n        if (this.server) {\n            tasks++;\n            // to release all resources\n            this.server.close(() => {\n                console.log('all gone!');\n                if (!--tasks && cb) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = null;\n                    }\n                    cb();\n                    cb = undefined;\n                }\n            });\n            this.server = null;\n        }\n\n        if (this.serverForWs) {\n            tasks++;\n            // to release all resources\n            this.serverForWs.close(() => {\n                console.log('all ws gone!');\n                if (!--tasks && cb) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = null;\n                    }\n                    cb();\n                    cb = undefined;\n                }\n            });\n            this.serverForWs = null;\n        }\n        if (!tasks && cb) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            cb();\n            cb = undefined;\n        }\n    }\n\n    onMessage(topic: MqttTopic, message: any, retain: boolean, binary?: boolean): void {\n        if (this.server) {\n            setImmediate(() => {\n                for (const k in this.clients) {\n                    if (Object.prototype.hasOwnProperty.call(this.clients, k)) {\n                        this.sendMessage2Client(this.clients[k], topic, message, retain ?? this.config.retain, binary);\n                    }\n                }\n\n                /*\n                for (let clientId in persistentSessions) {\n                    if (persistentSessions.hasOwnProperty(clientId) && !this.clients[clientId]) {\n                        (function (_clientId) {\n                            getMqttMessage(persistentSessions[_clientId], id, state, this.config.defaultQoS, true, (err, message) => {\n                                message && persistentSessions[_clientId]._messages.push(message);\n                            });\n                        })(clientId);\n                    }\n                }\n                */\n            });\n        }\n    }\n\n    onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        this.adapter.log.debug(`onStateChange ${id}: ${JSON.stringify(state)}`);\n\n        if (!this.server) {\n            return;\n        }\n\n        setImmediate(() => {\n            Object.keys(this.clients).forEach(k =>\n                this.sendState2Client(this.clients[k], id, state, this.config.defaultQoS, !this.config.noRetain),\n            );\n\n            Object.keys(this.persistentSessions).forEach(clientId => {\n                if (!this.clients[clientId]) {\n                    this.getMqttMessage<PersistentSession>(\n                        this.persistentSessions[clientId],\n                        id,\n                        state,\n                        this.config.defaultQoS,\n                        !this.config.noRetain,\n                        (err, message, persistentClient) =>\n                            message &&\n                            persistentClient &&\n                            this.addMessageWithTopicCheck(persistentClient._messages, message),\n                    );\n                }\n            });\n        });\n    }\n\n    private async updateClientObjects(): Promise<void> {\n        if (this.config.doNotCreateClientObjects) {\n            return;\n        }\n        if (this.updateClientsRunning) {\n            this.updateClientsRestart = true;\n            return;\n        }\n        this.updateClientsRunning = true;\n        const clientIds = [];\n\n        if (this.clients) {\n            for (const id in this.clients) {\n                const _id = id || this.clients[id].id || this.clients[id].stream.remoteAddress;\n                const oid = `info.clients.${_id.replace(/[.\\s]+/g, '_')}`;\n                clientIds.push(oid);\n                const clientObj = await this.adapter.getObjectAsync(oid);\n                if (!clientObj?.native) {\n                    await this.adapter.setObject(oid, {\n                        type: 'state',\n                        common: {\n                            name: _id,\n                            role: 'indicator.reachable',\n                            type: 'boolean',\n                            read: true,\n                            write: false,\n                        },\n                        native: {\n                            ip: this.clients[id].stream.remoteAddress,\n                            port: this.clients[id].stream.remotePort,\n                        },\n                    });\n                } else if (\n                    clientObj.native.port !== this.clients[id].stream.remotePort ||\n                    clientObj.native.ip !== this.clients[id].stream.remoteAddress\n                ) {\n                    clientObj.native.port = this.clients[id].stream.remotePort;\n                    clientObj.native.ip = this.clients[id].stream.remoteAddress;\n                    await this.adapter.setObjectAsync(clientObj._id, clientObj);\n                }\n                await this.adapter.setStateAsync(oid, true, true);\n            }\n        }\n\n        // read all other states and set alive to false\n        const allStates = await this.adapter.getStatesAsync('info.clients.*');\n        for (const id in allStates) {\n            if (!clientIds.includes(id.replace(`${this.adapter.namespace}.`, ''))) {\n                await this.adapter.setState(id, false, true);\n            }\n        }\n\n        this.updateClientsRunning = false;\n        if (this.updateClientsRestart) {\n            this.updateClientsRestart = false;\n            this.startUpdateClientObjects();\n        }\n    }\n\n    private startUpdateClientObjects(): void {\n        if (this.updateClientsTimeout) {\n            clearTimeout(this.updateClientsTimeout);\n            this.updateClientsTimeout = null;\n        }\n        this.updateClientsTimeout = setTimeout(() => {\n            this.updateClientObjects().catch(e => this.adapter.log.error(`Cannot update client objects: ${e}`));\n        }, 1000);\n    }\n\n    private updateClients(): void {\n        this.startUpdateClientObjects();\n\n        void this.adapter.setState('info.connection', {\n            val: this.clients ? Object.keys(this.clients).join(', ') : '',\n            ack: true,\n        });\n    }\n\n    private getMqttMessage<\n        T extends {\n            id: string;\n            _subsID?: {\n                [id: string]: {\n                    regex: RegExp;\n                    qos: 0 | 1 | 2;\n                    pattern: MqttPattern;\n                };\n            };\n            _subs?: {\n                [topic: string]: {\n                    regex: RegExp;\n                    qos: 0 | 1 | 2;\n                    pattern: MqttPattern;\n                };\n            };\n        },\n    >(\n        client: T,\n        id: string,\n        state: ioBroker.State | undefined | null,\n        qos: 0 | 1 | 2 | undefined,\n        retain: boolean | undefined,\n        cb: (err: string | null, message?: MqttMessage, client?: T) => void,\n    ): void {\n        if (!this.id2topic[id]) {\n            void this.adapter.getForeignObject(id, (err, obj) => {\n                if (err) {\n                    cb(`Client [${client.id}] Cannot resolve topic name for ID: ${id} (err: ${err})`);\n                    return;\n                }\n                if (!obj) {\n                    cb(`Client [${client.id}] Cannot resolve topic name for ID: ${id} (object not found)`);\n                    return;\n                }\n                if (!obj._id) {\n                    cb(\n                        `Client [${client.id}] Cannot resolve topic name for ID: ${id} (object has no id): ${JSON.stringify(obj)}`,\n                    );\n                    return;\n                }\n                if (!obj.native?.topic) {\n                    this.id2topic[obj._id] = convertID2topic(\n                        obj._id,\n                        null,\n                        this.config.prefix,\n                        this.adapter.namespace,\n                        this.config.removePrefix,\n                    );\n                } else {\n                    this.id2topic[obj._id] = obj.native.topic;\n                }\n\n                const topic = this.id2topic[obj._id];\n                obj.common ||= {} as ioBroker.StateCommon;\n\n                this.topic2id[topic] ||= { obj: obj as ioBroker.StateObject, id: obj._id };\n\n                void this.getMqttMessage<T>(client, obj._id, state, qos, retain, cb);\n            });\n            return;\n        }\n\n        // client has subscription for this ID\n        let message: MqttMessage | undefined;\n        let topic;\n        let pattern;\n\n        if (client._subsID?.[id]) {\n            topic = this.id2topic[id];\n\n            let payload: null | string;\n            if (!state) {\n                payload = null;\n            } else {\n                payload = state2string(state.val);\n            }\n\n            message = {\n                topic: this.config.extraSet && state && !state.ack ? `${topic}/set` : topic,\n                payload,\n                qos: client._subsID[id].qos,\n                retain: false,\n                ts: Date.now(),\n                count: 0,\n                messageId: 0,\n            };\n        } else {\n            //  Check patterns\n            if (client._subs && (pattern = this.checkPattern(client._subs, id)) !== null) {\n                topic = this.id2topic[id];\n                // Cache the value\n                client._subsID ||= {};\n                client._subsID[id] = pattern;\n\n                let payload;\n                if (!state) {\n                    payload = null;\n                } else {\n                    payload = state2string(state.val);\n                }\n\n                message = {\n                    topic: this.config.extraSet && state && !state.ack ? `${topic}/set` : topic,\n                    payload,\n                    qos: pattern.qos,\n                    retain: false,\n                    ts: Date.now(),\n                    count: 0,\n                    messageId: 0,\n                };\n            }\n        }\n\n        if (message) {\n            message = this.addMessageAttributes(message, {\n                qos: qos ?? this.config.defaultQoS,\n                retain: retain ?? false,\n            });\n        }\n\n        cb(null, message, client);\n    }\n\n    private getNextMessageId(): number {\n        const id = this.messageId;\n\n        this.messageId++;\n        if (this.messageId > 65535) {\n            this.messageId = 1;\n        }\n\n        return id;\n    }\n\n    private addMessageAttributes(\n        message: MqttMessage,\n        attributes: {\n            qos: 0 | 1 | 2;\n            retain: boolean;\n            binary?: boolean;\n        },\n    ): MqttMessage {\n        return {\n            ...message,\n            qos: message.qos ?? attributes.qos,\n            retain: attributes.retain,\n            messageId: this.messageId,\n            ts: Date.now(),\n            count: 0,\n            binary: attributes.binary,\n            cmd: 'publish',\n        };\n    }\n\n    private sendMessage2Client(\n        client: MqttConnection,\n        topic: MqttTopic,\n        payload: ioBroker.State | ioBroker.StateValue,\n        retain: boolean,\n        binary?: boolean,\n    ): void {\n        const message = this.addMessageAttributes(\n            {\n                topic,\n                payload: state2string(payload),\n                binary,\n                retain,\n                ts: Date.now(),\n                count: 0,\n                qos: client._subsID?.[topic]?.qos ?? 0,\n                messageId: 0,\n            },\n            { qos: client._subsID?.[topic]?.qos ?? 0, retain },\n        );\n\n        if (this.config.debug) {\n            this.adapter.log.debug(\n                `Client [${client.id}] send to this client \"${message.topic}\" (retain: ${message.retain}): ${message.payload !== 'null' ? message.payload : 'deleted'}`,\n            );\n        }\n\n        client.publish(message);\n\n        if (message.qos > 0) {\n            client._messages ||= [];\n            client._messages.push(message);\n        }\n    }\n\n    private sendState2Client(\n        client: MqttConnection,\n        id: string,\n        state: ioBroker.State | null | undefined,\n        qos?: 0 | 1 | 2,\n        retain?: boolean,\n        cb?: (id: string) => void,\n    ): void {\n        if (messageboxRegex.test(id)) {\n            return;\n        }\n\n        this.getMqttMessage<MqttConnection>(client, id, state, qos, retain, (err, message, client) => {\n            if (message) {\n                if (this.config.debug) {\n                    this.adapter.log.debug(\n                        `Client [${client!.id}] send to this client \"${message.topic}\": ${message.payload !== null ? message.payload : 'deleted'}`,\n                    );\n                }\n\n                client!.publish(message);\n\n                if (message.qos > 0) {\n                    client!._messages ||= [];\n                    client!._messages.push(message);\n                }\n            }\n\n            cb?.(id);\n        });\n    }\n\n    private sendStates2Client(client: MqttConnection, list: string[]): void {\n        if (list?.length) {\n            const id = list.shift() || '';\n            this.sendState2Client(client, id, this.states[id], 0, !this.config.noRetain, () =>\n                setTimeout(() => this.sendStates2Client(client, list), this.config.sendInterval),\n            );\n        } else {\n            //return;\n        }\n    }\n\n    private resendMessages2Client(client: MqttConnection, messages: MqttMessage[], i?: number): void {\n        i ||= 0;\n        if (messages && i < messages.length) {\n            try {\n                messages[i].ts = Date.now();\n                messages[i].count ||= 0;\n                messages[i].count!++;\n                this.adapter.log.debug(\n                    `Client [${client.id}] Resend messages on connect: ${messages[i].topic} and id ${messages[i].messageId} (${messages[i].cmd}) = ${messages[i].payload}`,\n                );\n                if (messages[i].cmd === 'publish') {\n                    messages[i].messageId = this.getNextMessageId();\n                    client.publish(messages[i]);\n                }\n            } catch (e) {\n                this.adapter.log.warn(`Client [${client.id}] Cannot resend message: ${e as Error}`);\n            }\n\n            if (this.config.sendInterval) {\n                setTimeout(() => this.resendMessages2Client(client, messages, i + 1), this.config.sendInterval);\n            } else {\n                setImmediate(() => this.resendMessages2Client(client, messages, i + 1));\n            }\n        } else {\n            // return;\n        }\n    }\n\n    /*\n     4.7.1.2 Multi-level wildcard\n\n     The number sign (‘#’ U+0023) is a wildcard character that matches any number of levels within a topic. The multi-level wildcard represents the parent and any number of child levels. The multi-level wildcard character MUST be specified either on its own or following a topic level separator. In either case it MUST be the last character specified in the Topic Filter [MQTT-4.7.1-2].\n\n     Non-normative comment,\n     For example, if a Client subscribes to “sport/tennis/player1/#”, it would receive messages published using these topic names:\n     ·         “sport/tennis/player1”\n     ·         “sport/tennis/player1/ranking”\n     ·         “sport/tennis/player1/score/wimbledon”\n\n     Non-normative comment\n     ·         “sport/#” also matches the singular “sport”, since # includes the parent level.\n     ·         “#” is valid and will receive every Application Message\n     ·         “sport/tennis/#” is valid\n     ·         “sport/tennis#” is not valid\n     ·         “sport/tennis/#/ranking” is not valid\n\n     */\n    private checkPattern(\n        patterns: {\n            [topic: string]: {\n                regex: RegExp;\n                qos: 0 | 1 | 2;\n                pattern: MqttPattern;\n            };\n        },\n        id: string,\n    ): {\n        regex: RegExp;\n        qos: 0 | 1 | 2;\n        pattern: MqttPattern;\n    } | null {\n        const pattern = Object.keys(patterns).find(p => patterns[p].regex.test(id));\n\n        return pattern ? patterns[pattern] : null;\n    }\n\n    private async processTopic(\n        id: string,\n        topic: MqttTopic,\n        message: ioBroker.State | ioBroker.StateValue | null | undefined,\n        qos: 0 | 1 | 2,\n        retain: boolean,\n        isAck: boolean,\n        ignoreClient: MqttConnection,\n    ): Promise<void> {\n        if (id === `${this.adapter.namespace}.info.connection`) {\n            this.adapter.log.debug(`Ignore State update for ${id} because adapter internal state.`);\n            return;\n        }\n\n        // expand an old version of objects\n        let messageType = typeof message;\n        let stateType: ioBroker.CommonType = Array.isArray(message)\n            ? 'array'\n            : messageType === 'string' ||\n                messageType === 'number' ||\n                messageType === 'boolean' ||\n                messageType === 'object'\n              ? messageType\n              : 'mixed';\n\n        // if it is a State\n        if (typeof message === 'object' && message !== null && message.val !== undefined) {\n            messageType = typeof message.val;\n            stateType = Array.isArray(message.val)\n                ? 'array'\n                : messageType === 'string' ||\n                    messageType === 'number' ||\n                    messageType === 'boolean' ||\n                    messageType === 'object'\n                  ? messageType\n                  : 'mixed';\n        }\n\n        // update a type of state if necessary\n        const obj = this.topic2id[topic].obj;\n        if (\n            obj &&\n            this.namespaceRegEx.test(id) &&\n            (!obj.native?.topic || (obj.common && obj.common.type !== 'mixed' && obj.common.type !== stateType))\n        ) {\n            if (obj.common && obj.common.type !== 'mixed' && obj.common.type !== stateType) {\n                // mqtt topics could change types, but log it to communicate to the user if a type is frequently fluctuating\n                this.adapter.log.info(`Server: Changed type of \"${id}\" from \"${obj.common.type}\" to \"${stateType}\"`);\n                obj.common.type = stateType;\n            }\n\n            obj.native ||= {};\n            obj.native.topic = topic;\n            try {\n                await this.adapter.setForeignObject(id, obj);\n            } catch (e) {\n                this.adapter.log.error(`Could not update object \"${id}\": ${(e as Error).message}`);\n            }\n        }\n\n        if (this.config.debug) {\n            this.adapter.log.debug(`Server received \"${topic}\" (${typeof message}): ${JSON.stringify(message)}`);\n        }\n\n        if (message !== undefined && message !== null) {\n            let value: ioBroker.State;\n            if (typeof message === 'object') {\n                value = message;\n            } else {\n                value = { val: message, ack: isAck } as ioBroker.State;\n            }\n            if (\n                value.val !== undefined &&\n                value.val !== null &&\n                this.namespaceRegEx.test(this.topic2id[topic].id) &&\n                this.topic2id[topic].obj?.common &&\n                this.topic2id[topic].obj.common.type !== 'mixed' &&\n                this.topic2id[topic].obj.common.type !== typeof value.val\n            ) {\n                this.adapter.log.info(\n                    `Server: Changed type of \"${this.topic2id[topic].id}\" from \"${this.topic2id[topic].obj.common.type}\" to \"mixed\"`,\n                );\n                try {\n                    await this.adapter.extendObject(this.topic2id[topic].id, { common: { type: 'mixed' } });\n                } catch (err) {\n                    this.adapter.log.warn(\n                        `Error while updating object \"${this.topic2id[topic].id}\" for Server: ${err as Error}`,\n                    );\n                }\n                this.topic2id[topic].obj.common.type = 'mixed';\n            }\n            try {\n                await this.adapter.setForeignStateAsync(id, value);\n            } catch {\n                // ignore\n            }\n\n            this.states[id] = value;\n        } else {\n            this.states[id] = { val: null, ack: isAck } as ioBroker.State;\n        }\n\n        // send a message to all other clients\n        if (this.config.onchange && this.server && message !== undefined && message !== null) {\n            setImmediate(() => {\n                let state: ioBroker.State;\n                if (typeof message !== 'object') {\n                    state = { val: message } as ioBroker.State;\n                } else {\n                    state = message;\n                }\n\n                Object.keys(this.clients).forEach(k => {\n                    // if 'get' and 'set' have different topic names, send state to issuing a client too.\n                    if (this.clients[k] !== ignoreClient || this.config.extraSet) {\n                        this.sendState2Client(this.clients[k], id, state, qos, retain);\n                    }\n                });\n            });\n        }\n        // ELSE\n        // this will be done indirect. The message will be sent to js-controller, and if adapter is subscribed, it gets this message over stateChange\n    }\n\n    private async checkObject(id: string, topic: MqttTopic, message?: string | null): Promise<void> {\n        if (isIgnoredTopic(id, this.ignoredTopicsRegexes)) {\n            return;\n        }\n        this.topic2id[topic] ||= {\n            id: '',\n            obj: { _id: '', common: {} as ioBroker.StateCommon, native: {}, type: 'state' },\n            processing: true,\n        };\n\n        if (this.config.debug) {\n            this.adapter.log.debug(`Check object for topic \"${topic}\"`);\n        }\n\n        let obj: ioBroker.Object | undefined | null = null;\n        try {\n            obj = await this.adapter.getObjectAsync(id);\n        } catch {\n            // ignore\n        }\n\n        if (\n            obj?._id?.startsWith(`${this.adapter.namespace}.`) &&\n            obj.type === 'folder' &&\n            obj.native?.autocreated === 'by automatic ensure logic'\n        ) {\n            // ignore a default created object because we now have a more defined one\n            obj = null;\n        }\n\n        if (!obj) {\n            try {\n                obj = await this.adapter.getForeignObjectAsync(id);\n            } catch {\n                // ignore\n            }\n            if (\n                obj?._id?.startsWith(`${this.adapter.namespace}.`) &&\n                obj.type === 'folder' &&\n                obj.native?.autocreated === 'by automatic ensure logic'\n            ) {\n                // ignore a default created object because we now have a more defined one\n                obj = null;\n            }\n\n            if (!obj) {\n                id = `${this.adapter.namespace}.${id}`;\n\n                if (this.config.ignoreNewObjects) {\n                    this.adapter.log.warn(`Object ${id} ignored and not created`);\n                    throw new Error(`Object ${id} not exists`);\n                }\n\n                // only for type detection\n                const parsedMessage = convertMessage(topic, message, this.adapter);\n                const messageType = typeof parsedMessage;\n                const stateType = Array.isArray(parsedMessage)\n                    ? 'array'\n                    : messageType === 'string' ||\n                        messageType === 'number' ||\n                        messageType === 'boolean' ||\n                        messageType === 'object'\n                      ? messageType\n                      : 'mixed';\n\n                // create state\n                obj = {\n                    _id: id,\n                    common: {\n                        name: topic,\n                        write: true,\n                        read: true,\n                        role: 'variable',\n                        desc: 'mqtt server variable',\n                        type: stateType,\n                    },\n                    native: {\n                        topic,\n                    },\n                    type: 'state',\n                };\n                if (typeof parsedMessage === 'object' && parsedMessage?.val !== undefined) {\n                    const messageType = typeof parsedMessage.val;\n                    obj.common.type = Array.isArray(parsedMessage.val)\n                        ? 'array'\n                        : messageType === 'string' ||\n                            messageType === 'number' ||\n                            messageType === 'boolean' ||\n                            messageType === 'object'\n                          ? messageType\n                          : 'mixed';\n                }\n\n                this.adapter.log.debug(`Create object for topic: ${topic}[ID: ${id}]`);\n                try {\n                    await this.adapter.setForeignObject(id, obj);\n                } catch {\n                    // ignore\n                }\n            } else if (this.config.debug) {\n                this.adapter.log.debug(`    Found object for topic \"${topic}\" = ${obj._id}`);\n            }\n        } else if (this.config.debug) {\n            this.adapter.log.debug(`    Found object for topic \"${topic}\" = ${obj._id}`);\n        }\n\n        if (obj && !obj._id) {\n            obj._id = id;\n        }\n\n        const stateObj: ioBroker.StateObject = obj as ioBroker.StateObject;\n\n        this.topic2id[topic].id = stateObj._id;\n        this.topic2id[topic].obj = stateObj;\n        this.topic2id[topic].processing = false;\n\n        // do not wait the finish of the function\n        ensureObjectStructure(this.adapter, stateObj._id, this.verifiedObjects).catch(e => this.adapter.log.error(e));\n    }\n\n    private async receivedTopic(packet: MqttMessage, client: MqttConnection): Promise<void> {\n        let isAck = true;\n        let topic = packet.topic;\n        const message = packet.payload;\n        const qos = packet.qos;\n        const retain = packet.retain;\n        const now = Date.now();\n        let id;\n\n        if (this.config.extraSet && packet.topic.match(/\\/set$/)) {\n            isAck = false;\n            packet.topic = packet.topic.substring(0, packet.topic.length - 4);\n            topic = packet.topic;\n        }\n\n        if (this.topic2id[topic]) {\n            id = this.topic2id[topic].id || convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n        } else {\n            id = convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n        }\n\n        if (!id) {\n            this.adapter.log.error(`Client [${client.id}] Invalid topic name: ${JSON.stringify(topic)}`);\n            return;\n        }\n        if (isIgnoredTopic(id, this.ignoredTopicsRegexes)) {\n            return;\n        }\n\n        // If state is unknown => create mqtt.X.topic\n        if (`${this.adapter.namespace}.${id}`.length > this.config.maxTopicLength) {\n            this.adapter.log.warn(`Client [${client.id}] Topic name is too long: ${id.substring(0, 100)}...`);\n            return;\n        }\n\n        if (!this.topic2id[topic]) {\n            try {\n                await this.checkObject(id, topic, message);\n            } catch {\n                return;\n            }\n        } else if (this.topic2id[topic].processing) {\n            // still looking for id\n            this.topic2id[topic].message = convertMessage(topic, message, this.adapter) as\n                | ioBroker.StateValue\n                | ioBroker.State;\n            if (this.config.debug) {\n                this.adapter.log.debug(\n                    `Client [${client.id}] Server received (but in process) \"${topic}\" (${typeof message}): ${message}`,\n                );\n            }\n            return;\n        }\n\n        let parsedMessage: ioBroker.StateValue | ioBroker.State;\n\n        if (this.topic2id[topic].message) {\n            // get last received message\n            parsedMessage = this.topic2id[topic].message!;\n            delete this.topic2id[topic].message;\n        } else if (this.topic2id[topic].obj) {\n            parsedMessage = convertMessage(topic, message, this.adapter, client.id) as\n                | ioBroker.StateValue\n                | ioBroker.State;\n        }\n\n        if (qos) {\n            Object.keys(this.persistentSessions).forEach(clientId => {\n                if (clientId !== client.id && !this.persistentSessions[clientId].connected) {\n                    const state =\n                        parsedMessage !== null && typeof parsedMessage === 'object'\n                            ? parsedMessage\n                            : ({ val: parsedMessage, ack: isAck } as ioBroker.State);\n\n                    // try to collect this message if a client subscribed\n                    this.getMqttMessage<PersistentSession>(\n                        this.persistentSessions[clientId],\n                        id,\n                        state,\n                        this.config.defaultQoS,\n                        true,\n                        (err, sendMessage, persistentClient) =>\n                            // if sendMessage is defined, then the message should be delivered because subscribed, but we deliver the original message\n                            sendMessage &&\n                            persistentClient &&\n                            this.addMessageWithTopicCheck(persistentClient._messages, {\n                                topic,\n                                qos,\n                                retain,\n                                messageId: packet.messageId || sendMessage.messageId,\n                                ts: now,\n                                payload: message,\n                                count: 0,\n                                cmd: 'publish',\n                            }),\n                    );\n                }\n            });\n        }\n\n        await this.processTopic(this.topic2id[topic].id, topic, message, qos, retain, isAck, client);\n    }\n\n    private addMessageWithTopicCheck(arr: MqttMessage[], message: MqttMessage): void {\n        for (const i in arr) {\n            if (arr[i].topic === message.topic) {\n                // if same topic we do not add a new entry, but pot. update existing of newer\n                if (message.ts! > arr[i].ts!) {\n                    arr[i] = message;\n                }\n                return;\n            }\n        }\n        arr.push(message);\n    }\n\n    private clientClose(client: MqttConnection, reason?: string): void {\n        if (!client) {\n            return;\n        }\n\n        if (this.persistentSessions[client.id]) {\n            this.persistentSessions[client.id].connected = false;\n        }\n\n        if (client._sendOnStart) {\n            clearTimeout(client._sendOnStart);\n            client._sendOnStart = null;\n        }\n        if (client._resendonStart) {\n            clearTimeout(client._resendonStart);\n            client._resendonStart = null;\n        }\n\n        try {\n            if (this.clients[client.id] && client.__secret === this.clients[client.id].__secret) {\n                this.adapter.log.info(`Client [${client.id}] connection closed: ${reason}`);\n                delete this.clients[client.id];\n                this.updateClients();\n                if (client._will && reason !== 'disconnected') {\n                    void this.receivedTopic({ ...client._will, messageId: 0 }, client)\n                        .catch(() => null) // ignore\n                        .then(() => client.destroy());\n                } else {\n                    client.destroy();\n                }\n            } else {\n                client.destroy();\n            }\n        } catch (e) {\n            this.adapter.log.warn(`Client [${client.id}] Cannot close client: ${e as Error}`);\n        }\n    }\n\n    private validateRequest(\n        type: 'publish' | 'pubrec' | 'pubcomp' | 'pubrel' | 'subscribe' | 'unsubscribe' | 'pingreq' | 'puback',\n        client: MqttConnection,\n    ): boolean {\n        if (this.config.user && !client.authenticated) {\n            this.adapter.log.warn(`Client [${client.id}] sends ${type} after unsuccessful authentication. Ignore!`);\n            return false;\n        }\n\n        if (this.clients[client.id] && client.__secret !== this.clients[client.id].__secret) {\n            this.adapter.log.debug(\n                `Old client ${client.id} with secret ${client.__secret} sends ${type}. Ignore! Actual secret is ${this.clients[client.id].__secret}`,\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    private startServer(\n        socket: Server | WsServer,\n        server: HttpHttpsServer | null,\n        port: number,\n        bind: string,\n        ssl: boolean,\n        ws: boolean,\n    ): void {\n        // Event variable to hold a connection event type\n        let connectionEvent: 'secureConnection' | 'connection';\n\n        // Check if SSL/TLS connection is required\n        if (this.config.ssl) {\n            // Set event variable to SSL/TLS connection\n            connectionEvent = 'secureConnection';\n        } else {\n            // Set event variable to plain TCP connection\n            connectionEvent = 'connection';\n        }\n\n        // Use event variable to start the connection\n        socket.on(connectionEvent, (stream: any) => {\n            let client: MqttConnection;\n            if (ws) {\n                client = mqtt(wsStream(stream));\n            } else {\n                client = mqtt(stream);\n            }\n\n            // Store unique connection identifier\n            client.__secret = `${Date.now()}_${Math.round(Math.random() * 10000)}`;\n\n            client.on(\n                'connect',\n                (options: {\n                    clientId: string;\n                    cleanSession?: boolean;\n                    clean?: boolean;\n                    keepalive: number;\n                    username?: string;\n                    password?: string;\n                    will?: {\n                        topic: string;\n                        payload: string;\n                        qos: 0 | 1 | 2;\n                        retain: boolean;\n                    };\n                }): void => {\n                    // set client id\n                    client.id = options.clientId;\n                    if (this.config.forceCleanSession === 'clean') {\n                        client.cleanSession = true;\n                    } else if (this.config.forceCleanSession === 'keep') {\n                        client.cleanSession = false;\n                    } else {\n                        // The old logic always resulted in 'undefined' when cleanSession was not active,\n                        // because options.cleanSession was undefined. This led to client.cleanSession being set to undefined.\n                        // client.cleanSession = options.cleanSession === undefined ? options.cleanSession : options.clean;\n\n                        // The improved logic below should be better:\n                        client.cleanSession = options.cleanSession !== undefined ? options.cleanSession : options.clean;\n                    }\n\n                    client._keepalive = options.keepalive;\n\n                    // get possible an old client\n                    const oldClient = this.clients[client.id];\n\n                    if (this.config.user) {\n                        if (\n                            this.config.user !== options.username ||\n                            this.config.pass !== (options.password || '').toString()\n                        ) {\n                            this.adapter.log.warn(\n                                `Client [${client.id}] has invalid password(${options.password}) or username(${options.username})`,\n                            );\n                            client.authenticated = false;\n                            client.connack({ returnCode: 4 });\n                            if (oldClient) {\n                                // delete existing client\n                                delete this.clients[client.id];\n                                this.updateClients();\n                                oldClient.destroy();\n                            }\n                            client.destroy();\n                            return;\n                        }\n                        client.authenticated = true;\n                    }\n\n                    if (oldClient) {\n                        this.adapter.log.info(\n                            `Client [${client.id}] reconnected. Old secret ${this.clients[client.id].__secret}. New secret ${client.__secret}`,\n                        );\n                        // need to destroy the old client\n\n                        if (client.__secret !== this.clients[client.id].__secret) {\n                            // it is another socket!!\n                            // It was following situation:\n                            // - old connection was active\n                            // - new connection is on the same TCP\n                            // Just forget him\n                            // oldClient.destroy();\n                        }\n                    } else {\n                        this.adapter.log.info(`Client [${client.id}] connected with secret ${client.__secret}`);\n                    }\n\n                    let sessionPresent = false;\n\n                    if (!client.cleanSession && this.config.storeClientsTime !== 0) {\n                        if (this.persistentSessions[client.id]) {\n                            sessionPresent = true;\n                            this.persistentSessions[client.id].lastSeen = Date.now();\n                        } else {\n                            this.persistentSessions[client.id] = {\n                                id: client.id,\n                                _subsID: {},\n                                _subs: {},\n                                _messages: [],\n                                lastSeen: Date.now(),\n                            };\n                        }\n                        client._messages = this.persistentSessions[client.id]._messages || [];\n                        this.persistentSessions[client.id].connected = true;\n                    } else if (client.cleanSession && this.persistentSessions[client.id]) {\n                        delete this.persistentSessions[client.id];\n                    }\n                    client._messages ||= [];\n\n                    client.connack({ returnCode: 0, sessionPresent });\n                    this.clients[client.id] = client;\n                    this.updateClients();\n\n                    if (options.will) {\n                        // the client's will message options. object that supports the following properties:\n                        // topic:   the will topic. string\n                        // payload: the will payload. string\n                        // qos:     will qos level. number\n                        // retain:  will retain flag. boolean\n                        client._will = JSON.parse(JSON.stringify(options.will));\n                        let id;\n                        if (this.topic2id[client._will.topic]) {\n                            id =\n                                this.topic2id[client._will.topic].id ||\n                                convertTopic2id(client._will.topic, false, this.config.prefix, this.adapter.namespace);\n                        } else {\n                            id = convertTopic2id(client._will.topic, false, this.config.prefix, this.adapter.namespace);\n                        }\n                        this.checkObject(id, client._will.topic, options.will.payload)\n                            .then(() => {\n                                // something went wrong while JSON.parse, so the payload of last will not be handled correct as buffer\n                                client._will.payload = options.will!.payload;\n                                this.adapter.log.debug(\n                                    `Client [${client.id}] with last will ${JSON.stringify(client._will)}`,\n                                );\n                            })\n                            .catch(err => this.adapter.log.info(err.message));\n                    }\n\n                    // Send all subscribed variables to a client\n                    if (this.config.publishAllOnStart) {\n                        // Give to client 2 seconds to send the `subscribe` message\n                        client._sendOnStart = setTimeout(() => {\n                            client._sendOnStart = null;\n                            this.sendStates2Client(client, Object.keys(this.states));\n                        }, this.config.sendOnStartInterval);\n                    }\n\n                    if (this.persistentSessions[client.id]) {\n                        client._subsID = this.persistentSessions[client.id]._subsID;\n                        client._subs = this.persistentSessions[client.id]._subs;\n                        if (this.persistentSessions[client.id]._messages.length) {\n                            // give to the client a little bit time\n                            client._resendonStart = setTimeout(\n                                (clientId: string): void => {\n                                    client._resendonStart = null;\n                                    if (this.persistentSessions[clientId]) {\n                                        this.resendMessages2Client(client, this.persistentSessions[clientId]._messages);\n                                    }\n                                },\n                                100,\n                                client.id,\n                            );\n                        }\n                    }\n\n                    // set timeout for stream to 1,5 times keepalive [MQTT-3.1.2-24].\n                    if (!ws && client._keepalive !== 0) {\n                        const streamTimeoutSec = 1.5 * client._keepalive;\n                        stream.setTimeout(streamTimeoutSec * 1000);\n\n                        this.adapter.log.debug(\n                            `Client [${client.id}] with keepalive ${client._keepalive} set timeout to ${streamTimeoutSec} seconds`,\n                        );\n                    }\n                },\n            );\n\n            // only when we are the RECEIVER of the message\n            client.on(\n                'publish',\n                async (packet: {\n                    messageId: number;\n                    qos: 0 | 1 | 2;\n                    ts: number;\n                    cmd: 'pubrel';\n                    count: number;\n                    topic: string;\n                    payload: string;\n                    retain: boolean;\n                }): Promise<void> => {\n                    if (!this.validateRequest('publish', client)) {\n                        return;\n                    }\n\n                    if (this.config.debug) {\n                        this.adapter.log.debug(\n                            `Client [${client.id}] received publish package ${JSON.stringify(packet)}`,\n                        );\n                    }\n\n                    if (this.persistentSessions[client.id]) {\n                        this.persistentSessions[client.id].lastSeen = Date.now();\n                    }\n\n                    if (packet.qos === 1) {\n                        // send PUBACK to a client\n                        client.puback({ messageId: packet.messageId });\n                    } else if (packet.qos === 2) {\n                        const pack = client._messages?.find(e => e.messageId === packet.messageId);\n                        if (pack) {\n                            // duplicate message => ignore\n                            this.adapter.log.info(\n                                `Client [${client.id}] Ignored duplicate message with ID: ${packet.messageId}`,\n                            );\n                            return;\n                        }\n                        packet.ts = Date.now();\n                        packet.cmd = 'pubrel';\n                        packet.count = 0;\n                        client._messages ||= [];\n                        client._messages.push(packet);\n\n                        client.pubrec({ messageId: packet.messageId });\n                        return;\n                    }\n\n                    await this.receivedTopic(packet, client);\n                },\n            );\n\n            // response for QoS2\n            // only when we are the SENDER of the message\n            client.on(\n                'pubrec',\n                (packet: {\n                    messageId: number;\n                    topic: MqttTopic;\n                    payload: string | Buffer;\n                    qos: 0 | 1 | 2;\n                    retain: boolean;\n                }) => {\n                    if (!this.validateRequest('pubrec', client)) {\n                        return;\n                    }\n\n                    if (this.config.debug) {\n                        this.adapter.log.debug(\n                            `Client [${client.id}] received pubrec package ${JSON.stringify(packet)}`,\n                        );\n                    }\n\n                    if (this.persistentSessions[client.id]) {\n                        this.persistentSessions[client.id].lastSeen = Date.now();\n                    }\n\n                    // remove this message from queue\n                    const frame = client._messages?.find(e => e.messageId === packet.messageId);\n                    if (frame) {\n                        client.pubrel({ messageId: packet.messageId });\n                    } else {\n                        this.adapter.log.info(\n                            `Client [${client.id}] Received pubrec on ${client.id} for unknown messageId ${packet.messageId}`,\n                        );\n                    }\n                },\n            );\n\n            // response for QoS2\n            // only when we are the SENDER of the message\n            client.on('pubcomp', (packet: { messageId: number }): void => {\n                if (!this.validateRequest('pubcomp', client)) {\n                    return;\n                }\n\n                if (this.config.debug) {\n                    this.adapter.log.debug(`Client [${client.id}] received pubcomp package ${JSON.stringify(packet)}`);\n                }\n\n                if (this.persistentSessions[client.id]) {\n                    this.persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                let pos = -1;\n                // remove this message from queue\n                if (client._messages) {\n                    pos = client._messages.findIndex(e => e.messageId === packet.messageId);\n                }\n                if (pos !== -1) {\n                    client._messages.splice(pos, 1);\n                } else {\n                    this.adapter.log.info(\n                        `Client [${client.id}] Received pubcomp for unknown message ID: ${packet.messageId}`,\n                    );\n                }\n            });\n\n            // response for QoS2\n            // only when we are the RECEIVER of the message\n            client.on('pubrel', async (packet: { messageId: number }): Promise<void> => {\n                if (!this.validateRequest('pubrel', client)) {\n                    return;\n                }\n\n                if (this.config.debug) {\n                    this.adapter.log.debug(`Client [${client.id}] received pubrel package ${JSON.stringify(packet)}`);\n                }\n\n                if (this.persistentSessions[client.id]) {\n                    this.persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                // remove this message from queue\n                let pos = -1;\n                // remove this message from queue\n                if (client._messages) {\n                    pos = client._messages.findIndex(e => e.messageId === packet.messageId);\n                }\n                if (pos !== -1) {\n                    client.pubcomp({ messageId: packet.messageId });\n                    await this.receivedTopic(client._messages[pos], client);\n                    client._messages.splice(pos, 1);\n                } else {\n                    this.adapter.log.info(\n                        `Client [${client.id}] Received pubrel for unknown message ID: ${packet.messageId}`,\n                    );\n                }\n            });\n\n            // response for QoS1\n            client.on('puback', (packet: { messageId: number }): void => {\n                if (!this.validateRequest('puback', client)) {\n                    return;\n                }\n\n                if (this.config.debug) {\n                    this.adapter.log.debug(`Client [${client.id}] received puback package ${JSON.stringify(packet)}`);\n                }\n\n                if (this.persistentSessions[client.id]) {\n                    this.persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                // remove this message from queue\n                let pos = -1;\n                // remove this message from queue\n                if (client._messages) {\n                    pos = client._messages.findIndex(e => e.messageId === packet.messageId);\n                }\n                if (pos !== -1) {\n                    this.adapter.log.debug(\n                        `Client [${client.id}] Received puback for ${client.id} message ID: ${packet.messageId}`,\n                    );\n                    client._messages.splice(pos, 1);\n                } else {\n                    this.adapter.log.info(\n                        `Client [${client.id}] Received puback for unknown message ID: ${packet.messageId}`,\n                    );\n                }\n            });\n\n            client.on(\n                'subscribe',\n                async (packet: {\n                    messageId: number;\n                    subscriptions: { qos: 0 | 1 | 2; topic: MqttTopic }[];\n                }): Promise<void> => {\n                    if (!this.validateRequest('subscribe', client)) {\n                        return;\n                    }\n\n                    if (this.config.debug) {\n                        this.adapter.log.debug(\n                            `Client [${client.id}] received subscribe package ${JSON.stringify(packet)}`,\n                        );\n                    }\n\n                    if (this.persistentSessions[client.id]) {\n                        this.persistentSessions[client.id].lastSeen = Date.now();\n                    }\n\n                    const granted = [];\n                    client._subsID ||= {};\n                    client._subs ||= {};\n\n                    for (let i = 0; i < packet.subscriptions.length; i++) {\n                        this.adapter.log.debug(\n                            `Client [${client.id}] Handle subscribe: ${JSON.stringify(packet.subscriptions[i])}`,\n                        );\n                        granted.push(packet.subscriptions[i].qos);\n\n                        const topic = packet.subscriptions[i].topic;\n                        let id;\n\n                        if (this.topic2id[topic]) {\n                            id =\n                                this.topic2id[topic].id ||\n                                convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n                        } else {\n                            id = convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n                        }\n\n                        if (!id) {\n                            this.adapter.log.error(`Client [${client.id}] Invalid topic: ${topic}`);\n                            continue;\n                        }\n\n                        // if pattern without wildcards\n                        if (!id.includes('*') && !id.includes('#') && !id.includes('+')) {\n                            // If state is unknown => create mqtt.X.topic\n                            if (!this.topic2id[topic]) {\n                                try {\n                                    await this.checkObject(id, topic);\n                                } catch {\n                                    return;\n                                }\n                            }\n\n                            client._subsID[this.topic2id[topic].id] = {\n                                pattern: id,\n                                regex: new RegExp(pattern2RegEx(id, this.adapter)),\n                                qos: packet.subscriptions[i].qos,\n                            };\n\n                            this.adapter.log.info(`Client [${client.id}] subscribes on \"${this.topic2id[topic].id}\"`);\n\n                            if (this.config.publishOnSubscribe) {\n                                setTimeout(() => {\n                                    this.adapter.log.info(`Client [${client.id}] publishOnSubscribe`);\n                                    this.sendState2Client(\n                                        client,\n                                        this.topic2id[topic].id,\n                                        this.states[this.topic2id[topic].id],\n                                    );\n                                }, 200);\n                            }\n                        } else {\n                            let pattern = topic;\n                            // remove prefix\n                            if (pattern.startsWith(this.config.prefix)) {\n                                pattern = pattern.substring(this.config.prefix.length);\n                            }\n                            pattern = pattern.replace(/\\//g, '.');\n                            if (pattern[0] === '.') {\n                                pattern = pattern.substring(1);\n                            }\n\n                            // add a simple pattern\n                            let regText = pattern2RegEx(pattern, this.adapter);\n                            client._subs[topic] = {\n                                regex: new RegExp(regText),\n                                qos: packet.subscriptions[i].qos,\n                                pattern: pattern,\n                            };\n                            this.adapter.log.info(\n                                `Client [${client.id}] subscribes on \"${topic}\" with regex /${regText}/`,\n                            );\n\n                            // add simple mqtt.0.pattern\n                            pattern = `${this.adapter.namespace}/${pattern}`;\n                            regText = pattern2RegEx(pattern, this.adapter);\n                            client._subs[`${this.adapter.namespace}/${topic}`] = {\n                                regex: new RegExp(regText),\n                                qos: packet.subscriptions[i].qos,\n                                pattern,\n                            };\n                            this.adapter.log.info(\n                                `Client [${client.id}] subscribes on \"${topic}\"  with regex /${regText}/`,\n                            );\n\n                            if (this.config.publishOnSubscribe) {\n                                setTimeout(() => {\n                                    this.adapter.log.info(\n                                        `Client [${client.id}] publishOnSubscribe send all known states`,\n                                    );\n                                    Object.keys(this.states).forEach(savedId => {\n                                        if (this.checkPattern(client._subs!, savedId)) {\n                                            this.sendState2Client(client, savedId, this.states[savedId]);\n                                        }\n                                    });\n                                }, 200);\n                            }\n                        }\n                    }\n\n                    client.suback({ granted, messageId: packet.messageId });\n                },\n            );\n\n            client.on('unsubscribe', (packet: { messageId: number; unsubscriptions: MqttTopic[] }): void => {\n                if (!this.validateRequest('unsubscribe', client)) {\n                    return;\n                }\n\n                if (this.config.debug) {\n                    this.adapter.log.debug(\n                        `Client [${client.id}] received unsubscribe package ${JSON.stringify(packet)}`,\n                    );\n                }\n\n                if (this.persistentSessions[client.id]) {\n                    this.persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                for (let i = 0; i < packet.unsubscriptions.length; i++) {\n                    const topic = packet.unsubscriptions[i];\n                    let id;\n\n                    if (this.topic2id[topic]) {\n                        id =\n                            this.topic2id[topic].id ||\n                            convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n                    } else {\n                        id = convertTopic2id(topic, false, this.config.prefix, this.adapter.namespace);\n                    }\n\n                    if (!id) {\n                        this.adapter.log.error(`Client [${client.id}] unsubscribes from invalid topic: ${topic}`);\n                        continue;\n                    }\n\n                    // if pattern without wildcards\n                    if (!id.includes('*') && !id.includes('#') && !id.includes('+')) {\n                        // If the state is known\n                        if (this.topic2id[topic]) {\n                            const _id = this.topic2id[topic].id;\n                            if (client._subsID?.[_id]) {\n                                delete client._subsID[_id];\n                                this.adapter.log.info(`Client [${client.id}] unsubscribes on \"${_id}\"`);\n                            } else {\n                                this.adapter.log.info(`Client [${client.id}] unsubscribes on unknown \"${_id}\"`);\n                            }\n                        } else {\n                            this.adapter.log.info(`Client [${client.id}] unsubscribes on unknown topic \"${topic}\"`);\n                        }\n                    } else {\n                        let pattern = topic.replace(/\\//g, '.');\n                        if (pattern[0] === '.') {\n                            pattern = pattern.substring(1);\n                        }\n\n                        // add a simple pattern\n                        if (client._subs?.[topic]) {\n                            this.adapter.log.info(`Client [${client.id}] unsubscribes on \"${topic}\"`);\n                            delete client._subs[topic];\n                            if (client._subs[`${this.adapter.namespace}/${topic}`]) {\n                                // add simple mqtt.0.pattern\n                                delete client._subs[`${this.adapter.namespace}/${topic}`];\n                                this.adapter.log.info(\n                                    `Client [${client.id}] unsubscribes on \"${this.adapter.namespace}/${topic}\"`,\n                                );\n                            }\n                        } else {\n                            this.adapter.log.info(`Client [${client.id}] unsubscribes on unknown \"${topic}\"`);\n                        }\n                    }\n                }\n                client.unsuback({ messageId: packet.messageId });\n            });\n\n            client.on('pingreq', (/*packet*/) => {\n                if (!this.validateRequest('pingreq', client)) {\n                    return;\n                }\n\n                if (this.persistentSessions[client.id]) {\n                    this.persistentSessions[client.id].lastSeen = Date.now();\n                }\n\n                this.adapter.log.debug(`Client [${client.id}] pingreq`);\n                client.pingresp();\n            });\n\n            // connection error handling\n            client.on('close', (hadError?: boolean) =>\n                this.clientClose(client, hadError ? 'closed because of error' : 'closed'),\n            );\n            client.on('error', (e: Error) => this.clientClose(client, e.toString()));\n            client.on('disconnect', () => this.clientClose(client, 'disconnected'));\n\n            // client lost without a close\n            stream.on('timeout', () => this.clientClose(client, 'timeout'));\n        });\n\n        (server || (socket as Server))\n            .listen(port, bind, () => {\n                this.adapter.log.info(\n                    `Starting MQTT${ws ? '-WebSocket' : ''}${ssl ? ' (Secure)' : ''}${this.config.user ? ' authenticated' : ''} server on ${bind || '0.0.0.0'}:${port}`,\n                );\n                this.adapter.log.debug(`The MQTT server${ws ? ' (WebSocket)' : ''} has successfully started!`);\n            })\n            .on('error', (err: Error): void =>\n                this.adapter.log.error(\n                    `Error starting MQTT (Setting up listener)${ws ? '-WebSocket' : ''}${ssl ? ' (Secure)' : ''}${this.config.user ? ' authenticated' : ''} server on ${bind || '0.0.0.0'}:${port}: ${err}`,\n                ),\n            );\n    }\n\n    private checkResends(): void {\n        const now = Date.now();\n        this.resending = true;\n        for (const clientId in this.clients) {\n            if (Object.prototype.hasOwnProperty.call(this.clients, clientId) && this.clients[clientId]?._messages) {\n                for (let m = this.clients[clientId]._messages.length - 1; m >= 0; m--) {\n                    const message = this.clients[clientId]._messages[m];\n                    if (now - message.ts! >= this.config.retransmitInterval) {\n                        if (message.count! > this.config.retransmitCount) {\n                            this.adapter.log.warn(\n                                `Client [${clientId}] Message ${message.messageId} deleted after ${message.count} retries`,\n                            );\n                            this.clients[clientId]._messages.splice(m, 1);\n                            continue;\n                        }\n\n                        // resend this message\n                        message.count!++;\n                        message.ts = now;\n                        try {\n                            this.adapter.log.debug(\n                                `Client [${clientId}] Resend for ${message.cmd} message topic: ${message.topic}, payload: ${message.payload}`,\n                            );\n                            if (message.cmd === 'publish') {\n                                message.dup = true;\n                                this.clients[clientId].publish(message);\n                            } else if (message.cmd === 'pubrel') {\n                                this.clients[clientId].pubrec({\n                                    messageId: message.messageId,\n                                });\n                            }\n                        } catch (e) {\n                            this.adapter.log.warn(`Client [${clientId}] Cannot publish message: ${e as Error}`);\n                        }\n\n                        if (this.config.sendInterval) {\n                            setTimeout(this.checkResends, this.config.sendInterval);\n                        } else {\n                            setImmediate(this.checkResends);\n                        }\n                        return;\n                    }\n                }\n            }\n        }\n\n        // delete old sessions\n        if (this.config.storeClientsTime !== -1) {\n            Object.keys(this.persistentSessions).forEach(id => {\n                if (\n                    !this.persistentSessions[id] ||\n                    now - this.persistentSessions[id].lastSeen > this.config.storeClientsTime * 60000\n                ) {\n                    delete this.persistentSessions[id];\n                }\n            });\n        }\n\n        this.resending = false;\n    }\n\n    private init(): void {\n        // create a connected object and state\n        this.adapter.getObject('info.connection', (err, obj) => {\n            if (!obj?.common || obj.common.type !== 'string') {\n                obj = {\n                    _id: 'info.connection',\n                    type: 'state',\n                    common: {\n                        role: 'info.clients',\n                        name: {\n                            en: 'List of connected clients',\n                            de: 'Liste der verbundenen Clients',\n                            ru: 'Список подключенных клиентов',\n                            it: 'Elenco dei client connessi',\n                            es: 'Lista de clientes conectados',\n                            pt: 'Lista de clientes conectados',\n                            nl: 'Lijst van verbonden clients',\n                            fr: 'Liste des clients connectés',\n                            pl: 'Lista podłączonych klientów',\n                            uk: 'Список підключених клієнтів',\n                            'zh-cn': '已连接客户端的列表',\n                        },\n                        type: 'string',\n                        read: true,\n                        write: false,\n                        def: '',\n                    },\n                    native: {},\n                };\n\n                this.adapter.setObject('info.connection', obj, () => this.updateClients());\n            } else {\n                this.updateClients();\n            }\n        });\n\n        this.config.port = parseInt(this.config.port as unknown as string, 10) || 1883;\n        if (this.config.port < 0 || this.config.port > 65535) {\n            this.adapter.log.error(`Port ${this.config.port} is invalid, using 1883.`);\n            this.config.port = 1883;\n        }\n        this.config.retransmitInterval ||= 2000;\n        this.config.retransmitCount ||= 10;\n        if (this.config.storeClientsTime === undefined) {\n            this.config.storeClientsTime = 1440;\n        } else {\n            this.config.storeClientsTime = parseInt(this.config.storeClientsTime as unknown as string, 10) || 0;\n        }\n\n        try {\n            // If using MQTTs, then create a TLS server with tls.createServer(), it's better for the TLS handshake.\n            // Otherwise, the server may not send MQTT-CONNACK, and protocol handling could fail.\n            this.server = this.config.ssl ? createTlsServer(this.config.certificates!) : createNetServer();\n        } catch (err) {\n            this.adapter.log.error(`Cannot create server: ${err as Error}`);\n            this.adapter.terminate\n                ? this.adapter.terminate(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                : process.exit(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n            return;\n        }\n\n        this.server.on('error', (err: Error): void => {\n            this.adapter.log.error(`Cannot create server: ${err}`);\n            this.adapter.terminate\n                ? this.adapter.terminate(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                : process.exit(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n        });\n\n        try {\n            this.adapter.log.debug(`The MQTT server is starting now...`);\n            this.startServer(this.server, null, this.config.port, this.config.bind, this.config.ssl, false);\n        } catch (err) {\n            this.adapter.log.error(`Cannot create server: ${err as Error}`);\n            this.adapter.terminate\n                ? this.adapter.terminate(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                : process.exit(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n            return;\n        }\n        if (this.config.webSocket) {\n            this.serverForWs = this.config.ssl ? createHttpsServer(this.config.certificates!) : createHttpServer();\n            this.serverWs = new WsServer({ server: this.serverForWs });\n\n            try {\n                this.adapter.log.debug(`The MQTT server (Websocket) is starting now...`);\n                this.startServer(\n                    this.serverWs,\n                    this.serverForWs,\n                    this.config.port + 1,\n                    this.config.bind,\n                    this.config.ssl,\n                    true,\n                );\n            } catch (err) {\n                this.adapter.log.error(`Cannot create server: ${err as Error}`);\n                this.adapter.terminate\n                    ? this.adapter.terminate(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION)\n                    : process.exit(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n                return;\n            }\n        }\n\n        this.resendTimer = setInterval(\n            () => !this.resending && this.checkResends(),\n            this.config.retransmitInterval || 2000,\n        );\n    }\n}\n"]}