{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { Adapter, type AdapterOptions } from '@iobroker/adapter-core';\nimport { connect } from 'mqtt';\nimport MQTTClient from './lib/MQTTClient';\nimport MQTTServer from './lib/MQTTServer';\nimport type { MqttAdapterConfig, MqttPattern } from './lib/types';\nimport { checkPublicIP } from './lib/securityChecker';\n\nclass MQTT extends Adapter {\n    declare config: MqttAdapterConfig;\n\n    private checkTimeout: NodeJS.Timeout | null = null;\n    private readonly messageboxRegex: RegExp = new RegExp('\\\\.messagebox$');\n    private states: Record<string, ioBroker.State> = {};\n    private server: any = null;\n    private client: MQTTClient | null = null;\n\n    constructor(options?: Partial<AdapterOptions>) {\n        super({\n            ...options,\n            name: 'mqtt',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    async onReady(): Promise<void> {\n        this.config.maxTopicLength = this.config.maxTopicLength || 100;\n\n        if (this.config.doNotCreateClientObjects) {\n            // delete all server connection information\n            const states = await this.getStatesAsync('info.clients.*');\n            for (const id in states) {\n                await this.delForeignObjectAsync(id);\n            }\n        }\n        // update connected clients\n        if (this.config.type === 'server') {\n            const channel = await this.getObjectAsync('info.clients');\n            if (!channel) {\n                await this.setObjectAsync('info.clients', {\n                    type: 'channel',\n                    common: {\n                        name: 'Clients',\n                        role: 'info',\n                    },\n                    native: {},\n                });\n            }\n        }\n\n        if (this.config.ssl && this.config.type === 'server') {\n            // Load certificates\n            this.config.certificates = (await this.getCertificatesAsync())[0];\n        }\n\n        // Start\n        await this.main();\n    }\n\n    async main(): Promise<void> {\n        this.config.forceCleanSession = this.config.forceCleanSession || 'no'; // default\n\n        // Subscribe on own variables to publish it\n        if (this.config.type === 'client') {\n            await this.subscribeForeignStatesAsync(`${this.namespace}.*`);\n            await this.readStatesForPattern(`${this.namespace}.*`);\n        }\n\n        if (this.config.publish) {\n            // change default publish setting to real instance\n            if (this.config.publish === 'mqtt.0.*' && this.instance !== 0) {\n                this.log.warn(`Default \"publish\" setting changed to \"${this.namespace}.*\". Restarting...`);\n                await this.extendForeignObjectAsync(`system.adapter.${this.namespace}`, {\n                    native: {\n                        publish: `${this.namespace}.*`,\n                    },\n                });\n                return; // Adapter will be restarted soon, no need to initialize now\n            }\n\n            const parts = this.config.publish\n                .split(',')\n                .map(p => p.trim())\n                .filter(p => p);\n            for (let t = 0; t < parts.length; t++) {\n                let part = parts[t];\n                if (this.config.type === 'client' && part === `${this.namespace}.*`) {\n                    // it was subscribed earlier\n                    continue;\n                }\n                if (part.includes('#')) {\n                    this.config.type !== 'client' &&\n                        this.log.warn(\n                            `Used MQTT notation for ioBroker in pattern \"${part}\": use \"${part.replace(/#/g, '*')} notation`,\n                        );\n                    part = part.replace(/#/g, '*');\n                }\n                await this.subscribeForeignStatesAsync(part);\n                await this.readStatesForPattern(part);\n            }\n        } else if (this.config.type !== 'client') {\n            this.log.warn(\n                `No ioBroker changes will be published to the clients. Set the \"publish\" option in the adapter settings to subscribe for relevant changes.`,\n            );\n        }\n\n        this.config.defaultQoS = (parseInt(this.config.defaultQoS as unknown as string, 10) || 0) as 0 | 1 | 2;\n        this.config.retain = (this.config.retain as unknown as string) === 'true' || this.config.retain === true;\n        this.config.persistent =\n            (this.config.persistent as unknown as string) === 'true' || this.config.persistent === true;\n        this.config.retransmitInterval = parseInt(this.config.retransmitInterval as unknown as string, 10) || 2000;\n        this.config.retransmitCount = parseInt(this.config.retransmitCount as unknown as string, 10) || 10;\n\n        if (this.config.retransmitInterval < this.config.sendInterval) {\n            this.config.retransmitInterval = this.config.sendInterval * 5;\n        }\n        // If no subscription, start client or server\n        if (this.config.type === 'client') {\n            this.config.clientId = this.config.clientId || `${this.host || 'mqtt'}.${this.namespace}`;\n            this.client = new MQTTClient(this, this.states);\n        } else {\n            this.server = new MQTTServer(this, this.states);\n\n            if (!this.config.doNotCheckPublicIP && (!this.config.user || !this.config.pass)) {\n                this.checkTimeout = setTimeout(async () => {\n                    this.checkTimeout = null;\n                    try {\n                        await checkPublicIP(this.config.port, this.config.ssl);\n                    } catch (e) {\n                        // this supported first from js-controller 5.0.\n                        this.sendToHost(\n                            `system.host.${this.host}`,\n                            'addNotification',\n                            {\n                                scope: 'system',\n                                category: 'securityIssues',\n                                message:\n                                    'Your mqtt instance is accessible from the internet without any protection. ' +\n                                    'Please enable authentication or disable the access from the internet.',\n                                instance: `system.adapter.${this.namespace}`,\n                            },\n                            (/* result */) => {\n                                /* ignore */\n                            },\n                        );\n\n                        this.log.error((e as Error).toString());\n                    }\n                }, 1000);\n            }\n        }\n    }\n\n    async readStatesForPattern(pattern: MqttPattern): Promise<void> {\n        try {\n            const res = await this.getForeignStatesAsync(pattern);\n            if (res) {\n                this.states ||= {};\n\n                Object.keys(res)\n                    .filter(id => !this.messageboxRegex.test(id))\n                    .forEach(id => {\n                        if (!this.states[id]) {\n                            this.states[id] = res[id];\n                        }\n                    });\n            }\n        } catch (error) {\n            this.log.error(`Cannot read states \"${pattern}\": ${error as Error}`);\n        }\n    }\n\n    onMessage(obj: ioBroker.Message): void {\n        if (!obj?.command) {\n            return;\n        }\n\n        switch (obj.command) {\n            case 'sendMessage2Client':\n                if (this.server) {\n                    this.log.debug(\n                        `Sending message from server to clients via topic ${obj.message.topic}: ${obj.message.message} ...`,\n                    );\n                    this.server.onMessage(\n                        obj.message.topic,\n                        obj.message.message,\n                        obj.message?.retain,\n                        obj.message?.binary,\n                    );\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { result: true }, obj.callback);\n                    }\n                } else if (this.client) {\n                    this.log.debug(\n                        `Sending message from client to server via topic ${obj.message.topic}: ${obj.message.message} ...`,\n                    );\n                    this.client.onMessage(\n                        obj.message.topic,\n                        obj.message.message,\n                        obj.message?.retain,\n                        obj.message?.binary,\n                    );\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { result: true }, obj.callback);\n                    }\n                } else {\n                    this.log.debug(\n                        `Neither MQTT server nor client not started, thus not sending message via topic ${obj.message.topic} (${obj.message.message}).`,\n                    );\n                    if (obj.callback) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            { error: 'Neither MQTT server nor client not started' },\n                            obj.callback,\n                        );\n                    }\n                }\n                break;\n\n            case 'sendState2Client':\n                if (this.server) {\n                    this.log.debug(\n                        `Sending message from server to clients ${obj.message.id}: ${obj.message.state} ...`,\n                    );\n                    this.server.onStateChange(obj.message.id, obj.message.state);\n                    if (obj.callback) {\n                        this.sendTo(obj.from, obj.command, { result: true }, obj.callback);\n                    }\n                } else if (this.client) {\n                    this.log.debug(`Sending message from client to server ${obj.message.id}: ${obj.message.state} ...`);\n                    this.client.onStateChange(obj.message.id, obj.message.state);\n                    if (obj.callback) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            { result: 'Sending message from client to server.' },\n                            obj.callback,\n                        );\n                    }\n                } else {\n                    this.log.debug(\n                        `Neither MQTT server nor client not started, thus not sending message to client ${obj.message.id} (${obj.message.state}).`,\n                    );\n                    if (obj.callback) {\n                        this.sendTo(\n                            obj.from,\n                            obj.command,\n                            { error: 'Neither MQTT server nor client not started' },\n                            obj.callback,\n                        );\n                    }\n                }\n                break;\n\n            case 'test': {\n                // Try to connect to mqtt broker\n                if (obj.callback && obj.message) {\n                    const _url = `mqtt${obj.message.ssl ? 's' : ''}://${obj.message.user ? `${obj.message.user}:${obj.message.pass}@` : ''}${obj.message.url}${obj.message.port ? `:${obj.message.port}` : ''}?clientId=ioBroker.${this.namespace}`;\n                    const _client = connect(_url);\n                    // Set timeout for connection\n                    const timeout = setTimeout(() => {\n                        _client.end();\n                        this.sendTo(obj.from, obj.command, 'timeout', obj.callback);\n                    }, 2000);\n\n                    // If connected, return success\n                    _client.on('connect', () => {\n                        _client.end();\n                        clearTimeout(timeout);\n                        this.sendTo(obj.from, obj.command, 'connected', obj.callback);\n                    });\n                    // If connected, return success\n                    _client.on('error', (err: Error): void => {\n                        _client.end();\n                        clearTimeout(timeout);\n                        this.log.warn(`Error on mqtt test: ${err}`);\n                        this.sendTo(obj.from, obj.command, 'error', obj.callback);\n                    });\n                }\n            }\n        }\n    }\n\n    onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        this.log.debug(`stateChange ${id}: ${JSON.stringify(state)}`);\n        // State deleted\n        if (!state) {\n            delete this.states[id];\n            // If SERVER\n            this.server?.onStateChange(id, undefined);\n            // if CLIENT\n            this.client?.onStateChange(id, undefined);\n        } else if ((this.config.sendAckToo || !state.ack) && !this.messageboxRegex.test(id)) {\n            // you can use the ack flag to detect if state is desired or acknowledged\n            const oldVal = this.states[id] ? this.states[id].val : null;\n            const oldAck = this.states[id] ? this.states[id].ack : null;\n            this.states[id] = state;\n\n            // If value really changed\n            if (!this.config.onchange || oldVal !== state.val || oldAck !== state.ack) {\n                // If SERVER\n                this.server?.onStateChange(id, state);\n                // if CLIENT\n                this.client?.onStateChange(id, state);\n            }\n        }\n    }\n\n    onUnload(callback: () => void): void {\n        if (this.checkTimeout) {\n            clearTimeout(this.checkTimeout);\n            this.checkTimeout = null;\n        }\n\n        try {\n            this.client?.destroy();\n            this.server?.destroy();\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<AdapterOptions> | undefined) => new MQTT(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MQTT())();\n}\n"]}