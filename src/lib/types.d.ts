export type MqttPattern = string;
export type MqttTopic = string;
export type MqttClientID = string;

export interface MqttAdapterConfig {
    type: 'client' | 'server';
    clientId: string;
    bind: string;
    port: number | string;
    ssl: boolean;
    selfSigned?: boolean;
    rootCertificatePath?: string;
    rejectUnauthorized: boolean;
    user: string;
    pass: string;
    url: string;
    patterns: string;
    onchange: boolean;
    publishAllOnStart: boolean;
    debug: boolean;
    publish: string;
    certPublic: string;
    certPrivate: string;
    certChained: string;
    prefix: string;
    forceCleanSession: 'no' | 'clean' | 'keep';
    sendAckToo: boolean;
    sendStateObject: boolean;
    webSocket: boolean;
    maxTopicLength: 100;
    publishOnSubscribe: boolean;
    extraSet: boolean;
    sendOnStartInterval: number;
    sendInterval: number;
    keepalive: number;
    reconnectPeriod: number;
    connectTimeout: number;
    persistent: boolean;
    defaultQoS: 0 | 1 | 2;
    retain: boolean;
    retransmitInterval: number;
    retransmitCount: number;
    storeClientsTime: number;
    removePrefix: string;
    ignoreNewObjects: boolean;
    noRetain: boolean;
    doNotCheckPublicIP: boolean;
    ignoredTopics: string;
    doNotCreateClientObjects: boolean;
    certificates?: ioBroker.Certificates;
}
